# Azure DevOps pipeline for CLI CI/CD

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - AiStockTradeApp.Cli/**
      - .azuredevops/pipelines/cli-ci.yml

pr:
  branches:
    include:
      - main
  paths:
    include:
      - AiStockTradeApp.Cli/**
      - .azuredevops/pipelines/cli-ci.yml

parameters:
  - name: environment
    displayName: "Environment to deploy to"
    type: string
    default: dev
    values:
      - dev
      - prod
  - name: instanceNumber
    displayName: "Instance number for resource differentiation"
    type: string
    default: "003"
  - name: seed
    displayName: "Run seeding (import listed stocks) after deploy"
    type: boolean
    default: true
  - name: seedCsv
    displayName: "CSV path to import (relative to repo)"
    type: string
    default: "data/nasdaq.com/nasdaq_screener_1755436177903.csv"

variables:
  - group: AiStockTradeApp
  - name: AZURE_SERVICE_CONNECTION
    value: svc_CSA_sub
  - name: AZURE_SUBSCRIPTION_ID
    value: "64c3d212-40ed-4c6d-a825-6adfbdf25dad"
  - name: DOTNET_VERSION
    value: "9.0.x"
  - name: vmImageName
    value: "ubuntu-latest"
  # Optional: auto-seed after deploy based on branch. Allowed values: 'none', 'dev', 'prod', 'both'
  - name: SEED_AFTER_DEPLOY
    value: "none"

pool:
  vmImage: $(vmImageName)

stages:
  - stage: Test
    displayName: "Test CLI and Solution"
    jobs:
      - job: TestCli
        displayName: "Build CLI and run smoke test"
        steps:
          - checkout: self
            fetchDepth: 0
            clean: true
  - stage: SmokeDev
    displayName: "Smoke test Development API"
    dependsOn: Test
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq('${{ parameters.environment }}', 'dev')))
    jobs:
      - job: SmokeDevJob
        displayName: "Check /health (dev)"
        steps:
          - checkout: none
          - script: |
              set -e
              API_BASE="https://api-aistock-dev-${{ parameters.instanceNumber }}.azurewebsites.net"
              echo "Pinging $API_BASE/health"
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE/health" || true)
              echo "Status: $STATUS"
              if [ "$STATUS" -ge 200 ] && [ "$STATUS" -lt 400 ]; then
                echo "Dev API is healthy"
              else
                echo "Dev API health check failed with status $STATUS"; exit 1
              fi
            displayName: "Curl health endpoint (dev)"

  - stage: SmokeProd
    displayName: "Smoke test Production API"
    dependsOn: [Test, SmokeDev]
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq('${{ parameters.environment }}', 'prod')))
    jobs:
      - job: SmokeProdJob
        displayName: "Check /health (prod)"
        steps:
          - checkout: none
          - script: |
              set -e
              API_BASE="https://api-aistock-prod-${{ parameters.instanceNumber }}.azurewebsites.net"
              echo "Pinging $API_BASE/health"
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE/health" || true)
              echo "Status: $STATUS"
              if [ "$STATUS" -ge 200 ] && [ "$STATUS" -lt 400 ]; then
                echo "Prod API is healthy"
              else
                echo "Prod API health check failed with status $STATUS"; exit 1
              fi
            displayName: "Curl health endpoint (prod)"


  - stage: SeedDev
    displayName: "Seed listed stocks (dev)"
    dependsOn: SmokeDev
    condition: and(succeeded(), or(and(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), or(eq(variables['SEED_AFTER_DEPLOY'], 'dev'), eq(variables['SEED_AFTER_DEPLOY'], 'both'))), and(eq('${{ parameters.environment }}', 'dev'), eq(${{ parameters.seed }}, true))))
    jobs:
      - job: SeedDevJob
        displayName: "Import CSV into Dev API"
        steps:
          - checkout: self
            clean: true

          - task: UseDotNet@2
            displayName: "Setup .NET"
            inputs:
              packageType: sdk
              version: $(DOTNET_VERSION)

          - script: |
              set -e
              CSV_PATH='${{ parameters.seedCsv }}'
              API_BASE="https://api-aistock-dev-${{ parameters.instanceNumber }}.azurewebsites.net"
              echo "Using CSV: $CSV_PATH"
              test -f "$CSV_PATH" || { echo "CSV not found: $CSV_PATH"; exit 1; }
              dotnet run --project AiStockTradeApp.Cli/AiStockTradeApp.Cli.csproj -- import-listed --file "$CSV_PATH" --api "$API_BASE"
            displayName: "Run CLI import-listed (dev)"

  - stage: SeedProd
    displayName: "Seed listed stocks (prod)"
    dependsOn: SmokeProd
    condition: and(succeeded(), or(and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), or(eq(variables['SEED_AFTER_DEPLOY'], 'prod'), eq(variables['SEED_AFTER_DEPLOY'], 'both'))), and(eq('${{ parameters.environment }}', 'prod'), eq(${{ parameters.seed }}, true))))
    jobs:
      - job: SeedProdJob
        displayName: "Import CSV into Prod API"
        steps:
          - checkout: self
            clean: true

          - task: UseDotNet@2
            displayName: "Setup .NET"
            inputs:
              packageType: sdk
              version: $(DOTNET_VERSION)

          - script: |
              set -e
              CSV_PATH='${{ parameters.seedCsv }}'
              API_BASE="https://api-aistock-prod-${{ parameters.instanceNumber }}.azurewebsites.net"
              echo "Using CSV: $CSV_PATH"
              test -f "$CSV_PATH" || { echo "CSV not found: $CSV_PATH"; exit 1; }
              dotnet run --project AiStockTradeApp.Cli/AiStockTradeApp.Cli.csproj -- import-listed --file "$CSV_PATH" --api "$API_BASE"
            displayName: "Run CLI import-listed (prod)"
