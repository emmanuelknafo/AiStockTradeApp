# Azure DevOps pipeline: Run Changelog-Weaver with Azure OpenAI
# - Clone Hankanman/Changelog-Weaver
# - Install requirements
# - Create .env (using secure pipeline variables)
# - Run a small wrapper to configure the OpenAI Azure client and execute changelog generation
# - Publish generated markdown as a pipeline artifact
# - Optionally update a GitHub release body when GITHUB_RELEASE_ID is provided

# NOTE: Set the following pipeline variables (in pipeline UI or a variable group) and mark the secrets as secret:
# - AZURE_OPENAI_ENDPOINT
# - AZURE_OPENAI_KEY
# - AZURE_OPENAI_DEPLOYMENT_NAME
# - GITHUB_TOKEN (personal access token or repo token with repo scope to update releases)
# - Optionally: GITHUB_RELEASE_ID (release id to patch)

trigger: none
pr: none

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: "AiStockTradeApp"
    # # Variables below are expected to be set in the pipeline configuration or variable group
    # AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
    # AZURE_OPENAI_KEY: $(AZURE_OPENAI_KEY)
    # AZURE_OPENAI_DEPLOYMENT_NAME: $(AZURE_OPENAI_DEPLOYMENT_NAME)
    # GITHUB_TOKEN: $(GITHUB_TOKEN)
    # # You can optionally set GITHUB_RELEASE_ID to patch an existing GitHub release
    # GITHUB_RELEASE_ID: $(GITHUB_RELEASE_ID)
  - name: WIKI_PATH_ROOT
    value: "/Releases"
  - name: WIKI_IDENTIFIER
    value: "59aa6550-3563-42ed-a4e7-8088fb517b93"
  - name: WIKI_BRANCH
    value: "wikiMaster"

steps:
  - checkout: self
    persistCredentials: true
    fetchDepth: 0

  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.x"
    displayName: "Use Python 3.x"

  - script: |
      set -euo pipefail
      echo "Ensuring full history and tags..."
      git fetch --prune --tags --quiet || true

      # If the build is for a tag ref, just use that tag as the release tag
      SRC_REF="${BUILD_SOURCEBRANCH:-}"
      if [[ "$SRC_REF" == refs/tags/* ]]; then
        REL_TAG="${SRC_REF#refs/tags/}"
        echo "Detected tag build: $REL_TAG"
        echo "##vso[task.setvariable variable=ReleaseTag]$REL_TAG"
        exit 0
      fi

      # If HEAD already has a tag, use it
      EXISTING_TAG=$(git tag --points-at HEAD | head -n1 || true)
      if [ -n "$EXISTING_TAG" ]; then
        echo "HEAD already tagged with: $EXISTING_TAG"
        echo "##vso[task.setvariable variable=ReleaseTag]$EXISTING_TAG"
        exit 0
      fi

      echo "Installing GitVersion to compute release version..."
      dotnet tool install --global GitVersion.Tool >/dev/null 2>&1 || true
      export PATH="$PATH:$HOME/.dotnet/tools"
      # Run GitVersion and capture FullSemVer according to repo config
      FULL_SEMVER=$(dotnet-gitversion /output json | jq -r .FullSemVer)
      if [ -z "$FULL_SEMVER" ] || [ "$FULL_SEMVER" = "null" ]; then
        echo "Failed to compute version with GitVersion"
        exit 1
      fi
      REL_TAG="$FULL_SEMVER"

      echo "Creating annotated tag: $REL_TAG"
      git tag -a "$REL_TAG" -m "Release $REL_TAG"

      # Configure push URL using GitHub token if provided
      if [ -n "${GITHUB_TOKEN:-}" ]; then
        git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${BUILD_REPOSITORY_NAME}.git"
      fi
      git push origin "$REL_TAG"

      echo "##vso[task.setvariable variable=ReleaseTag]$REL_TAG"
    displayName: "Compute or create release tag"
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  - script: |
      git clone --depth 1 https://github.com/Hankanman/Changelog-Weaver.git changelog-weaver
    displayName: "Clone Changelog-Weaver"

  - script: |
      python -m pip install --upgrade pip
      python -m pip install -r changelog-weaver/requirements.txt
    displayName: "Install Changelog-Weaver dependencies"

  - script: |
      set -euo pipefail
      TO_TAG="${RELEASE_TAG:-${BUILD_SOURCEBRANCHNAME:-}}"
      # When pipeline is manually run there may be no branch name; fall back to computed release tag or 'manual'
      if [ -z "$TO_TAG" ]; then TO_TAG="manual"; fi

      cd changelog-weaver
      # Ensure tags are available for prev-tag detection
      git fetch --tags --quiet || true
      PREV_TAG=$(git tag --sort=-creatordate | grep -v "^${TO_TAG}$" | head -n1 || echo "v0.0.0")

      echo "SOLUTION_NAME=${BUILD_REPOSITORY_NAME:-}" > .env
      echo "RELEASE_VERSION=${TO_TAG}" >> .env
      echo "SOFTWARE_SUMMARY=Release ${TO_TAG}" >> .env
      echo "GET_ITEM_SUMMARY=True" >> .env
      echo "GET_CHANGELOG_SUMMARY=True" >> .env
      echo "INCLUDE_COMMITS=False" >> .env
      echo "PROJECT_URL=https://github.com/${BUILD_REPOSITORY_NAME:-}" >> .env
      echo "QUERY=is:closed" >> .env
      echo "ACCESS_TOKEN=${GITHUB_TOKEN:-}" >> .env
      echo "REPO_NAME=${BUILD_REPOSITORY_NAME:-}" >> .env
      echo "BRANCH=wikiMaster" >> .env
      echo "FROM_TAG=${PREV_TAG}" >> .env
      echo "TO_TAG=${TO_TAG}" >> .env

      # Azure OpenAI configuration (set as pipeline variables/secrets)
      echo "GPT_API_KEY=${AZURE_OPENAI_KEY:-}" >> .env
      echo "MODEL_BASE_URL=${AZURE_OPENAI_ENDPOINT:-}" >> .env
      echo "MODEL=${AZURE_OPENAI_DEPLOYMENT_NAME:-}" >> .env

      echo "OUTPUT_FOLDER=Releases" >> .env
      echo "LOG_LEVEL=INFO" >> .env

      # Also add OPENAI_* and AZURE_* variants expected by various client versions
      echo "OPENAI_API_BASE=${AZURE_OPENAI_ENDPOINT:-}" >> .env
      echo "OPENAI_API_KEY=${AZURE_OPENAI_KEY:-}" >> .env
      echo "OPENAI_API_TYPE=azure" >> .env
      echo "OPENAI_API_VERSION=2023-10-01-preview" >> .env

      echo "AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-}" >> .env
      echo "AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY:-}" >> .env

      echo ".env generated at $(pwd)/.env"
    displayName: "Create .env for Changelog-Weaver"
    env:
      AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
      AZURE_OPENAI_DEPLOYMENT_NAME: $(AZURE_OPENAI_DEPLOYMENT_NAME)
      AZURE_OPENAI_KEY: $(AZURE_OPENAI_KEY)
      GITHUB_TOKEN: $(GITHUB_TOKEN)
      RELEASE_TAG: $(ReleaseTag)

  - script: |
      cat > changelog-weaver/run_changelog.py <<'PY'
      import os
      from dotenv import load_dotenv
      load_dotenv('.env')
      import openai
      import sys
      print('=== Azure/OpenAI env diagnostics ===')
      print('MODEL_BASE_URL:', os.getenv('MODEL_BASE_URL'))
      print('OPENAI_API_BASE:', os.getenv('OPENAI_API_BASE'))
      print('OPENAI_API_TYPE:', os.getenv('OPENAI_API_TYPE'))
      print('OPENAI_API_VERSION:', os.getenv('OPENAI_API_VERSION'))
      key = os.getenv('OPENAI_API_KEY', os.getenv('GPT_API_KEY', ''))
      print('OPENAI_API_KEY set:', bool(key))
      if key:
          print('OPENAI_API_KEY preview:', key[:8] + '...')
      sys.stdout.flush()

      openai.api_type = os.getenv('OPENAI_API_TYPE', '')
      openai.api_base = os.getenv('OPENAI_API_BASE', os.getenv('MODEL_BASE_URL', ''))
      openai.api_version = os.getenv('OPENAI_API_VERSION', '')
      openai.api_key = key

      print('Resolved openai.api_base:', getattr(openai, 'api_base', None))
      print('Resolved openai.api_key set:', bool(getattr(openai, 'api_key', None)))
      sys.stdout.flush()

      from changelog_weaver.changelog import main as main_function
      import asyncio
      asyncio.run(main_function())
      PY
    displayName: "Prepare run_changelog.py wrapper"

  - script: |
      set -euo pipefail
      echo "Masked env diagnostics (presence + masked preview):"
      dump() {
        name="$1"
        value="$(printenv "$name" || true)"
        if [ -z "$value" ]; then
          echo "$name: <missing>"
        else
          echo "$name: ${value:0:6}***"
        fi
      }
      echo "BUILD_REPOSITORY_NAME: ${BUILD_REPOSITORY_NAME:-<missing>}"
      dump AZURE_OPENAI_ENDPOINT
      dump AZURE_OPENAI_DEPLOYMENT_NAME
      dump AZURE_OPENAI_KEY
      dump GITHUB_TOKEN
      echo "---- end diagnostics ----"
    displayName: "Masked env diagnostics"
    env:
      AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
      AZURE_OPENAI_DEPLOYMENT_NAME: $(AZURE_OPENAI_DEPLOYMENT_NAME)
      AZURE_OPENAI_KEY: $(AZURE_OPENAI_KEY)
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  - script: |
      set -euo pipefail
      echo "Running Azure OpenAI pre-flight test..."
      AZ_BASE="${AZURE_OPENAI_ENDPOINT:-}"
      AZ_DEPLOY="${AZURE_OPENAI_DEPLOYMENT_NAME:-}"
      AZ_KEY="${AZURE_OPENAI_KEY:-}"

      if [ -z "$AZ_BASE" ] || [ -z "$AZ_DEPLOY" ] || [ -z "$AZ_KEY" ]; then
        echo "Missing AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_DEPLOYMENT_NAME or AZURE_OPENAI_KEY; failing pre-flight."
        exit 1
      fi

      HTTP_CODE=$(curl -s -o /tmp/aztest.json -w "%{http_code}" -X POST "$AZ_BASE/openai/deployments/$AZ_DEPLOY/chat/completions?api-version=2023-10-01-preview" \
        -H "Content-Type: application/json" \
        -H "api-key: $AZ_KEY" \
        -d '{"messages":[{"role":"user","content":"ping"}],"max_tokens":1}')

      if [ "$HTTP_CODE" != "200" ]; then
        echo "Azure OpenAI pre-flight failed (HTTP $HTTP_CODE):"
        head -c 1000 /tmp/aztest.json || true
        exit 1
      fi
      echo "Azure OpenAI pre-flight succeeded (HTTP $HTTP_CODE)."
      head -c 200 /tmp/aztest.json || true
    displayName: "Azure OpenAI pre-flight test"
    env:
      AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
      AZURE_OPENAI_DEPLOYMENT_NAME: $(AZURE_OPENAI_DEPLOYMENT_NAME)
      AZURE_OPENAI_KEY: $(AZURE_OPENAI_KEY)
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  - script: |
      python - <<'PY'
      from pathlib import Path
      p = Path('changelog-weaver/changelog_weaver/configuration/model.py')
      if p.exists():
          s = p.read_text()
          old = 'self.client = openai.OpenAI(api_key=api_details.key)'
          if old in s:
              s = s.replace(old, 'openai.api_key = api_details.key\n        self.client = openai')
              p.write_text(s)
              print('Patched model.py to use module-level openai')
          else:
              print('Patch not required or already applied')
      else:
          print('model.py not found; skipping patch')
      PY
    displayName: "Patch Changelog-Weaver model for Azure"

  - script: |
      set -euo pipefail
      cd changelog-weaver
      # Ensure Releases/<owner> exists so the generator can write output
      OWNER=${BUILD_REPOSITORY_NAME%%/*}
      if [ -z "$OWNER" ]; then
        OWNER="${BUILD_REPOSITORY_NAME:-}"
      fi
      mkdir -p "Releases/$OWNER"
      python run_changelog.py
    displayName: "Run Changelog-Weaver"
    env:
      ACCESS_TOKEN: $(GITHUB_TOKEN)
      REPO_NAME: $(Build.Repository.Name)
      BRANCH: wikiMaster
      GPT_API_KEY: $(AZURE_OPENAI_KEY)
      MODEL_BASE_URL: $(AZURE_OPENAI_ENDPOINT)
      MODEL: $(AZURE_OPENAI_DEPLOYMENT_NAME)
      OPENAI_API_BASE: $(AZURE_OPENAI_ENDPOINT)
      OPENAI_BASE_URL: $(AZURE_OPENAI_ENDPOINT)
      OPENAI_API_KEY: $(AZURE_OPENAI_KEY)
      OPENAI_API_TYPE: azure
      OPENAI_API_VERSION: 2023-10-01-preview
      AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
      AZURE_OPENAI_KEY: $(AZURE_OPENAI_KEY)

  - script: |
      mkdir -p "$(Build.ArtifactStagingDirectory)/changelog"
      find changelog-weaver -type f -name '*.md' -path '*/Releases/*' -exec cp {} "$(Build.ArtifactStagingDirectory)/changelog/" \;
      ls -la "$(Build.ArtifactStagingDirectory)/changelog" || true
    displayName: "Gather generated changelog files"

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: "$(Build.ArtifactStagingDirectory)/changelog"
      artifact: "changelog"
    displayName: "Publish changelog artifact"

  - script: |
      if [ -n "${GITHUB_RELEASE_ID:-}" ]; then
        FILE=$(find changelog-weaver -type f -name '*.md' -path '*/Releases/*' | head -n1 || true)
        if [ -z "$FILE" ]; then
          echo "No changelog file found to attach to release"
          exit 0
        fi

        BODY=$(python -c 'import sys,json; print(json.dumps(open(sys.argv[1],"r",encoding="utf-8").read()))' "$FILE")
        if [ -z "$BODY" ] || [ "$BODY" = '""' ]; then
          echo "Empty changelog; skipping release patch"
          exit 0
        fi

        PAYLOAD=$(printf '{"body": %s}' "$BODY")
        echo "Patching GitHub release id: ${GITHUB_RELEASE_ID}"
        curl -s -X PATCH \
          -H "Authorization: token ${GITHUB_TOKEN}" \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD" \
          "https://api.github.com/repos/$(Build.Repository.Name)/releases/${GITHUB_RELEASE_ID}" -o /tmp/resp.json -w "%{http_code}"
        cat /tmp/resp.json || true
      else
        echo "GITHUB_RELEASE_ID not set; skipping release patch"
      fi
    displayName: "Optionally update GitHub release body"
    condition: and(succeeded(), ne(variables['GITHUB_RELEASE_ID'], ''))

  - script: |
      set -euo pipefail
      FILE=$(find changelog-weaver -type f -name '*.md' -path '*/Releases/*' | head -n1 || true)
      if [ -n "$FILE" ]; then
        echo "Changelog found: $FILE"
        echo "##vso[task.setvariable variable=HasChangelog]true"
      else
        echo "No changelog found; Wiki publish will be skipped"
        echo "##vso[task.setvariable variable=HasChangelog]false"
      fi
    displayName: "Detect changelog presence for Wiki"

  - script: |
      set -euo pipefail
      echo "Preparing wiki page content..."
      FILE=$(find changelog-weaver -type f -name '*.md' -path '*/Releases/*' | head -n1 || true)
      if [ -z "$FILE" ]; then
        echo "No changelog file found; skipping content build"
        exit 0
      fi
      TO_TAG="${RELEASE_TAG:-${BUILD_SOURCEBRANCHNAME:-}}"
      if [ -z "$TO_TAG" ]; then TO_TAG="manual"; fi
      PREV_TAG=$(grep '^FROM_TAG=' changelog-weaver/.env | cut -d'=' -f2 || true)
      DATE_UTC=$(date -u +%Y-%m-%d)
      GH_RELEASE_URL="https://github.com/${BUILD_REPOSITORY_NAME}/releases/tag/${TO_TAG}"
      {
        echo "# Release ${TO_TAG}"
        echo
        echo "- Repository: ${BUILD_REPOSITORY_NAME}"
        echo "- Date: ${DATE_UTC}"
        if [ -n "$PREV_TAG" ]; then echo "- Previous tag: ${PREV_TAG}"; fi
        echo "- GitHub Release: ${GH_RELEASE_URL}"
        echo
        echo "## Changelog"
        echo
        cat "$FILE"
        echo
      } > /tmp/wiki_page.md
      echo "Wrote /tmp/wiki_page.md"
    displayName: "Build wiki page content"
    condition: and(succeeded(), eq(variables['HasChangelog'], 'true'))
    env:
      RELEASE_TAG: $(ReleaseTag)

  - task: PowerShell@2
    displayName: "Publish release to Azure DevOps Wiki"
    condition: and(succeeded(), eq(variables['HasChangelog'], 'true'))
    inputs:
      pwsh: true
      filePath: scripts/publish-wiki.ps1
      arguments: >-
        -Pat '$(AZURE_DEVOPS_PAT)'
        -OrgUrl '$(System.CollectionUri)'
        -Project '$(System.TeamProject)'
        -ProjectId '$(System.TeamProjectId)'
        -WikiIdentifier '$(WIKI_IDENTIFIER)'
        -WikiBranch '$(WIKI_BRANCH)'
        -PageRoot '$(WIKI_PATH_ROOT)'
        -ReleaseVersion '$(ReleaseTag)'
        -FilePath '/tmp/wiki_page.md'
