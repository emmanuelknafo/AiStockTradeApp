# Azure DevOps pipeline to run JMeter load tests
# Auto-runs when files under load-tests/ change (any branch) and on PRs affecting that path.

trigger:
  branches:
    include:
      - '*'
  paths:
    include:
      - 'load-tests/**'
      - '.azuredevops/pipelines/load-tests.yml'

pr:
  branches:
    include:
      - '*'
  paths:
    include:
      - 'load-tests/**'
      - '.azuredevops/pipelines/load-tests.yml'

variables:
  vmImageName: 'windows-latest'
  jmeterImage: 'justb4/jmeter:5.5'
  resultsFile: 'results.jtl'
  host: 'app-aistock-dev-003.azurewebsites.net'
  port: '443'
  protocol: 'https'
  # Optional fallback when CSV not found; sampler prefers CSV
  path: '/health'
  threads: '20'
  ramp: '10'
  loop: '1'

stages:
- stage: LoadTests
  displayName: 'Run JMeter load tests'
  jobs:
  - job: RunJMeter
    displayName: 'Run JMeter (Docker)'
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self

    - task: CmdLine@2
      displayName: 'List test dir'
      inputs:
        script: |
          echo Listing test directory via container
          docker run --rm --entrypoint /bin/sh -v "$(Build.SourcesDirectory)/load-tests/jmeter:/tests" $(jmeterImage) -lc "ls -la /tests || true"

    - task: CmdLine@2
      displayName: 'Run JMeter (Docker)'
      inputs:
        script: |
          echo Generating JMX and running JMeter via container
          docker run --rm --entrypoint /bin/sh -v "$(Build.SourcesDirectory)/load-tests/jmeter:/tests" -w /tests $(jmeterImage) -lc "cp test-plan.jmx test-plan.generated.jmx && sed -i 's/@@THREADS@@/$(threads)/g' test-plan.generated.jmx && sed -i 's/@@RAMP@@/$(ramp)/g' test-plan.generated.jmx && sed -i 's/@@LOOP@@/$(loop)/g' test-plan.generated.jmx && rm -f $(resultsFile) || true"
          docker run --rm -v "$(Build.SourcesDirectory)/load-tests/jmeter:/tests" -w /tests $(jmeterImage) -n -t test-plan.generated.jmx -l $(resultsFile) -Jhost=$(host) -Jport=$(port) -Jprotocol=$(protocol) -Jpath=$(path)

    - task: CmdLine@2
      displayName: 'Generate HTML report'
      condition: always()
      inputs:
        script: |
          echo Generating HTML report via container
          docker run --rm --entrypoint /bin/sh -v "$(Build.SourcesDirectory)/load-tests/jmeter:/tests" -w /tests $(jmeterImage) -lc "if [ -f /tests/$(resultsFile) ]; then rm -rf /tests/report || true; fi"
          docker run --rm -v "$(Build.SourcesDirectory)/load-tests/jmeter:/tests" -w /tests $(jmeterImage) sh -lc "if [ -f /tests/$(resultsFile) ]; then jmeter -g $(resultsFile) -o /tests/report; else echo 'Results file not found. Skipping HTML report.'; fi"
        

    - task: CmdLine@2
      displayName: 'Detect artifacts (set variables)'
      condition: always()
      inputs:
        script: |
          echo Detecting artifacts via container
          docker run --rm --entrypoint /bin/sh -v "$(Build.SourcesDirectory)/load-tests/jmeter:/tests" $(jmeterImage) -lc "if [ -f /tests/$(resultsFile) ]; then echo '##vso[task.setvariable variable=resultsExists]true'; else echo '##vso[task.setvariable variable=resultsExists]false'; fi; if [ -d /tests/report ]; then echo '##vso[task.setvariable variable=reportExists]true'; else echo '##vso[task.setvariable variable=reportExists]false'; fi"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish JMeter results'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/load-tests/jmeter/$(resultsFile)'
        artifact: 'jmeter-results'
        publishLocation: 'pipeline'
      condition: and(always(), eq(variables.resultsExists, 'true'))

    - task: PublishPipelineArtifact@1
      displayName: 'Publish JMeter HTML report'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/load-tests/jmeter/report'
        artifact: 'jmeter-report'
        publishLocation: 'pipeline'
      condition: and(always(), eq(variables.reportExists, 'true'))
