# Azure DevOps pipeline to run JMeter load tests on Ubuntu with Docker

trigger:
  branches:
    include:
      - "*"
  paths:
    include:
      - "load-tests/**"
      - ".azuredevops/pipelines/load-tests.yml"

pr:
  branches:
    include:
      - "*"
  paths:
    include:
      - "load-tests/**"
      - ".azuredevops/pipelines/load-tests.yml"

# variables:
#   vmImageName: 'ubuntu-latest'
#   jmeterImage: 'justb4/jmeter:5.5'
#   resultsFile: 'results.jtl'
#   host: 'app-aistock-dev-003.azurewebsites.net'
#   port: '443'
#   protocol: 'https'
#   path: '/health'
#   threads: '20'
#   ramp: '10'
#   loop: '1'

# Force a Linux agent so bash is available
pool:
  vmImage: "$(vmImageName)"
# Azure DevOps pipeline to run JMeter load tests (manual trigger)
# Create a pipeline in Azure DevOps and point it to this file (azure-pipelines/load-tests.yml)

variables:
  vmImageName: "ubuntu-latest"
  jmeterImage: "justb4/jmeter:5.5"
  resultsFile: "results.jtl"
  host: "app-aistock-dev-003.azurewebsites.net"
  port: "443"
  protocol: "https"
  threads: "20"
  ramp: "10"
  loop: "1"

stages:
  - stage: LoadTests
    displayName: "Run JMeter load tests"
    jobs:
      - job: RunJMeter
        displayName: "Run JMeter (Docker)"
        pool:
          vmImage: $(vmImageName)
        steps:
          - checkout: self

          - script: |
              echo "Listing test directory"
              ls -la $(Build.SourcesDirectory)/load-tests/jmeter || true
            displayName: "List test dir"

          - script: |
              echo "Generating JMX from template..."
              sed -e "s|@@THREADS@@|$(threads)|g" -e "s|@@RAMP@@|$(ramp)|g" -e "s|@@LOOP@@|$(loop)|g" "$(Build.SourcesDirectory)/load-tests/jmeter/test-plan.jmx" > "$(Build.SourcesDirectory)/load-tests/jmeter/test-plan.generated.jmx"

              echo "Running JMeter in Docker image: $(jmeterImage)"
              docker --version || true
              docker run --rm -v "$(Build.SourcesDirectory)/load-tests/jmeter:/tests" -w /tests $(jmeterImage) -n -t test-plan.generated.jmx -l $(resultsFile) -Jhost=$(host) -Jport=$(port) -Jprotocol=$(protocol)
            displayName: "Run JMeter (Docker)"

          - script: |
              echo "Generating HTML report from results..."
              # Ensure previous report directory is removed; JMeter requires a non-existing or empty output dir
              rm -rf "$(Build.SourcesDirectory)/load-tests/jmeter/report" || true
              # Generate report inside the mounted volume path (/tests maps to $(Build.SourcesDirectory)/load-tests/jmeter)
              docker run --rm -v "$(Build.SourcesDirectory)/load-tests/jmeter:/tests" -w /tests $(jmeterImage) -g $(resultsFile) -o /tests/report
            displayName: "Generate HTML report"

          - task: PublishPipelineArtifact@1
            displayName: "Publish JMeter results"
            inputs:
              targetPath: "$(Build.SourcesDirectory)/load-tests/jmeter/$(resultsFile)"
              artifact: "jmeter-results"
              publishLocation: "pipeline"

          - task: PublishPipelineArtifact@1
            displayName: "Publish JMeter HTML report"
            inputs:
              targetPath: "$(Build.SourcesDirectory)/load-tests/jmeter/report"
              artifact: "jmeter-report"
              publishLocation: "pipeline"