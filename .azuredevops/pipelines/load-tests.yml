# Azure DevOps pipeline to run JMeter load tests
# Auto-runs when files under load-tests/ change (any branch) and on PRs affecting that path.

trigger:
  branches:
    include:
      - '*'
  paths:
    include:
      - 'load-tests/**'
      - '.azuredevops/pipelines/load-tests.yml'

pr:
  branches:
    include:
      - '*'
  paths:
    include:
      - 'load-tests/**'
      - '.azuredevops/pipelines/load-tests.yml'

variables:
  vmImageName: 'windows-latest'
  jmeterImage: 'justb4/jmeter:5.5'
  resultsFile: 'results.jtl'
  host: 'app-aistock-dev-003.azurewebsites.net'
  port: '443'
  protocol: 'https'
  # Optional fallback when CSV not found; sampler prefers CSV
  path: '/health'
  threads: '20'
  ramp: '10'
  loop: '1'

stages:
- stage: LoadTests
  displayName: 'Run JMeter load tests'
  jobs:
  - job: RunJMeter
    displayName: 'Run JMeter (Docker)'
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self

    - task: PowerShell@2
      displayName: 'List test dir'
      inputs:
        targetType: inline
        pwsh: false
        script: |
          Write-Host "Listing test directory"
          $dir = "$(Build.SourcesDirectory)/load-tests/jmeter"
          if (Test-Path $dir) { Get-ChildItem -Force -LiteralPath $dir | Format-Table -AutoSize } else { Write-Host "Directory not found: $dir" }

    - task: PowerShell@2
      displayName: 'Run JMeter (Docker)'
      inputs:
        targetType: inline
        pwsh: false
        script: |
          Write-Host "Generating JMX from template (Windows)..."
          $tpl = "$(Build.SourcesDirectory)/load-tests/jmeter/test-plan.jmx"
          $gen = "$(Build.SourcesDirectory)/load-tests/jmeter/test-plan.generated.jmx"
          $content = Get-Content -LiteralPath $tpl -Raw
          $content = $content -replace '@@THREADS@@','$(threads)'
          $content = $content -replace '@@RAMP@@','$(ramp)'
          $content = $content -replace '@@LOOP@@','$(loop)'
          Set-Content -LiteralPath $gen -Value $content -Encoding UTF8

          Write-Host "Running JMeter in Docker image: $(jmeterImage)"
          docker --version | Out-Host
          # Remove previous results to avoid mixing failures from older runs
          $results = "$(Build.SourcesDirectory)/load-tests/jmeter/$(resultsFile)"
          if (Test-Path $results) { Remove-Item -LiteralPath $results -Force -ErrorAction SilentlyContinue }
          docker run --rm -v "$(Build.SourcesDirectory)/load-tests/jmeter:/tests" -w /tests $(jmeterImage) -n -t test-plan.generated.jmx -l $(resultsFile) -Jhost=$(host) -Jport=$(port) -Jprotocol=$(protocol) -Jpath=$(path)

    - task: PowerShell@2
      displayName: 'Generate HTML report'
      inputs:
        targetType: inline
        pwsh: false
        script: |
          Write-Host "Generating HTML report from results (Windows)..."
          $results = "$(Build.SourcesDirectory)/load-tests/jmeter/$(resultsFile)"
          if (Test-Path $results) {
            # Ensure previous report directory is removed; JMeter requires a non-existing or empty output dir
            $reportDir = "$(Build.SourcesDirectory)/load-tests/jmeter/report"
            if (Test-Path $reportDir) { Remove-Item -LiteralPath $reportDir -Recurse -Force -ErrorAction SilentlyContinue }
            # Generate report inside the mounted volume path (/tests maps to $(Build.SourcesDirectory)/load-tests/jmeter)
            docker run --rm -v "$(Build.SourcesDirectory)/load-tests/jmeter:/tests" -w /tests $(jmeterImage) -g $(resultsFile) -o /tests/report
          } else {
            Write-Host "Results file not found ($results). Skipping HTML report generation."
          }
        

    - task: PowerShell@2
      displayName: 'Detect artifacts (set variables)'
      inputs:
        targetType: inline
        pwsh: false
        script: |
          Write-Host "Detecting artifacts and setting variables (Windows)..."
          $results = "$(Build.SourcesDirectory)/load-tests/jmeter/$(resultsFile)"
          if (Test-Path $results) {
            Write-Host "results.jtl found"
            Write-Host "##vso[task.setvariable variable=resultsExists]true"
          } else {
            Write-Host "results.jtl NOT found"
            Write-Host "##vso[task.setvariable variable=resultsExists]false"
          }
          $reportDir = "$(Build.SourcesDirectory)/load-tests/jmeter/report"
          if (Test-Path $reportDir) {
            Write-Host "report directory found"
            Write-Host "##vso[task.setvariable variable=reportExists]true"
          } else {
            Write-Host "report directory NOT found"
            Write-Host "##vso[task.setvariable variable=reportExists]false"
          }

    - task: PublishPipelineArtifact@1
      displayName: 'Publish JMeter results'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/load-tests/jmeter/$(resultsFile)'
        artifact: 'jmeter-results'
        publishLocation: 'pipeline'
      condition: and(always(), eq(variables.resultsExists, 'true'))

    - task: PublishPipelineArtifact@1
      displayName: 'Publish JMeter HTML report'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/load-tests/jmeter/report'
        artifact: 'jmeter-report'
        publishLocation: 'pipeline'
      condition: and(always(), eq(variables.reportExists, 'true'))
