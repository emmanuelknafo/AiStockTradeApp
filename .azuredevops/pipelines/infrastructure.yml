# Azure DevOps Pipeline for Infrastructure Deployment
# Converted from GitHub Actions workflow

trigger: none # Manual trigger only

parameters:
  - name: environment
    displayName: "Environment to deploy infrastructure"
    type: string
    default: "dev"
    values:
      - dev
      - prod

  - name: location
    displayName: "Azure region for deployment"
    type: string
    default: "Canada Central"

  - name: instanceNumber
    displayName: "Instance number for resource differentiation"
    type: string
    default: "003"

  - name: destroy
    displayName: "Destroy infrastructure instead of deploy"
    type: boolean
    default: false

variables:
  - group: "ai-stock-trade-app" # Variable group for shared variables
  - name: AZURE_SERVICE_CONNECTION
    value: "svc_CSA_sub" # Replace with your Azure service connection name
  - name: azureResourceGroupDev
    value: "rg-aistock-dev-${{ parameters.instanceNumber }}"
  - name: azureResourceGroupProd
    value: "rg-aistock-prod-${{ parameters.instanceNumber }}"

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: DeployDev
    displayName: "Deploy Development Infrastructure"
    condition: or(eq('${{ parameters.environment }}', 'dev'), eq('${{ parameters.environment }}', 'prod'))
    jobs:
      - deployment: DeployDevInfrastructure
        displayName: "Deploy Dev Infrastructure"
        environment: "development-${{ parameters.instanceNumber }}"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout code"
                - task: Bash@3
                  displayName: "Docker pre-clean (global)"
                  inputs:
                    targetType: inline
                    script: |
                      docker ps -aq | xargs -r docker rm -f || true
                      docker image prune -af || true

                - task: AzureCLI@2
                  displayName: "Azure Login and Create Dev Resource Group"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      RG_NAME="$(azureResourceGroupDev)"
                      echo "Creating dev resource group: $RG_NAME"
                      az group create --name "$RG_NAME" --location "${{ parameters.location }}"

                - task: AzureCLI@2
                  displayName: "Validate Dev Bicep Template"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      az deployment group validate \
                        --resource-group $(azureResourceGroupDev) \
                        --template-file ./infrastructure/main.bicep \
                        --parameters ./infrastructure/parameters.dev.json \
                        --parameters location="${{ parameters.location }}" \
                        --parameters instanceNumber="${{ parameters.instanceNumber }}" \
                        --parameters containerImage="ai-stock-trade-app:latest" \
                        --parameters alphaVantageApiKey="$(ALPHA_VANTAGE_API_KEY)" \
                        --parameters twelveDataApiKey="$(TWELVE_DATA_API_KEY)" \
                        --parameters sqlAdminPassword="$(SQL_ADMIN_PASSWORD)" \
                        --parameters enableAzureAdOnlyAuth=true \
                        --parameters enablePrivateSql=true \
                        --parameters vnetAddressSpace="10.60.0.0/16" \
                        --parameters appIntegrationSubnetPrefix="10.60.1.0/27" \
                        --parameters privateEndpointSubnetPrefix="10.60.2.0/28"

                - task: AzureCLI@2
                  displayName: "Deploy Dev Infrastructure"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      echo "Deploying dev infrastructure with container registry..."
                      az deployment group create \
                        --resource-group $(azureResourceGroupDev) \
                        --template-file ./infrastructure/main.bicep \
                        --parameters ./infrastructure/parameters.dev.json \
                        --parameters location="${{ parameters.location }}" \
                        --parameters instanceNumber="${{ parameters.instanceNumber }}" \
                        --parameters containerImage="ai-stock-trade-app:latest" \
                        --parameters alphaVantageApiKey="$(ALPHA_VANTAGE_API_KEY)" \
                        --parameters twelveDataApiKey="$(TWELVE_DATA_API_KEY)" \
                        --parameters sqlAdminPassword="$(SQL_ADMIN_PASSWORD)" \
                        --parameters enableAzureAdOnlyAuth=true \
                        --parameters enablePrivateSql=true \
                        --parameters vnetAddressSpace="10.60.0.0/16" \
                        --parameters appIntegrationSubnetPrefix="10.60.1.0/27" \
                        --parameters privateEndpointSubnetPrefix="10.60.2.0/28"

                - task: AzureCLI@2
                  displayName: "Set Web App Managed Identity as SQL Admin (Dev)"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      set -e
                      INSTANCE_NUM="${{ parameters.instanceNumber }}"
                      RG_NAME="rg-aistock-dev-${INSTANCE_NUM}"
                      WEBAPP_NAME="app-aistock-dev-${INSTANCE_NUM}"
                      SQL_SERVER_NAME="sql-aistock-dev-${INSTANCE_NUM}"
                      echo "[DEV] Ensuring web app managed identity present..."
                      for i in 1 2 3 4 5; do
                        PRINCIPAL_ID=$(az webapp identity show --name "$WEBAPP_NAME" --resource-group "$RG_NAME" --query principalId -o tsv 2>/dev/null || echo "")
                        if [ -n "$PRINCIPAL_ID" ] && [ "$PRINCIPAL_ID" != "null" ]; then echo "[DEV] principalId: $PRINCIPAL_ID"; break; fi
                        echo "[DEV] Identity not yet available (attempt $i); assigning..."
                        az webapp identity assign --name "$WEBAPP_NAME" --resource-group "$RG_NAME" >/dev/null || true
                        sleep 6
                      done
                      if [ -z "$PRINCIPAL_ID" ] || [ "$PRINCIPAL_ID" = "null" ]; then echo "[DEV][ERROR] Managed identity principal ID unavailable"; exit 1; fi
                      echo "[DEV] Checking current SQL Entra admin..."
                      CURRENT_ADMIN_LOGIN=$(az sql server ad-admin list --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" --query "[0].login" -o tsv 2>/dev/null || echo "")
                      CURRENT_ADMIN_OID=$(az sql server ad-admin list --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" --query "[0].sid" -o tsv 2>/dev/null || echo "")
                      if [ "$CURRENT_ADMIN_OID" = "$PRINCIPAL_ID" ]; then
                        echo "[DEV] Desired admin already set to MI ($CURRENT_ADMIN_LOGIN) - skipping reconfiguration."
                      else
                        if [ -n "$CURRENT_ADMIN_LOGIN" ]; then
                          echo "[DEV] Replacing existing admin '$CURRENT_ADMIN_LOGIN' with web app MI"
                          az sql server ad-admin delete --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" || true
                          sleep 5
                        else
                          echo "[DEV] No existing Entra admin set; creating new admin with MI"
                        fi
                        az sql server ad-admin create --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" --display-name "$WEBAPP_NAME" --object-id "$PRINCIPAL_ID"
                      fi
                      echo "[DEV] Waiting for admin propagation..."
                      get_admin_sid_dev() {
                        local list_sid
                        list_sid=$(az sql server ad-admin list --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" --query "[?login=='$WEBAPP_NAME'].sid | [0]" -o tsv 2>/dev/null || echo "")
                        if [ -n "$list_sid" ] && [ "$list_sid" != "null" ]; then echo "$list_sid"; return; fi
                        echo ""
                      }
                      sleep 8
                      PROPAGATED=false
                      for i in $(seq 1 24); do
                        ADMIN_OID=$(get_admin_sid_dev)
                        if [ "$ADMIN_OID" = "$PRINCIPAL_ID" ]; then echo "[DEV] Admin propagation confirmed (attempt $i)"; PROPAGATED=true; break; fi
                        echo "[DEV] Admin not propagated yet (attempt $i); current='$ADMIN_OID'; sleeping 5s..."; sleep 5
                      done
                      if [ "$PROPAGATED" != "true" ]; then
                        echo "[DEV][WARN] Propagation not confirmed after initial window. Gathering diagnostics..."
                        echo "[DEV] LIST JSON:"; az sql server ad-admin list --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" -o json || echo "(list failed)"
                        ANY_MATCH=$(az sql server ad-admin list --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" --query "[?sid=='$PRINCIPAL_ID'] | length(@)" -o tsv 2>/dev/null || echo "0")
                        if [ "$ANY_MATCH" = "1" ]; then
                          echo "[DEV][INFO] Principal ID appears in admin list despite show mismatch; proceeding (eventual consistency)."
                          PROPAGATED=true
                        fi
                      fi
                      FINAL_OID=$(get_admin_sid_dev)
                      if [ "$PROPAGATED" != "true" ] || [ "$FINAL_OID" != "$PRINCIPAL_ID" ]; then
                        echo "[DEV][ERROR] Admin assignment did not propagate correctly (expected=$PRINCIPAL_ID, final=$FINAL_OID)"; exit 1; fi
                      echo "[DEV] MI is confirmed as SQL Entra admin (sid=$FINAL_OID)."

                - task: AzureCLI@2
                  displayName: "Verify Dev Infrastructure SQL Setup"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      INSTANCE_NUM="${{ parameters.instanceNumber }}"
                      SQL_SERVER_NAME="sql-aistock-dev-${INSTANCE_NUM}"
                      DATABASE_NAME="sqldb-aistock-dev-${INSTANCE_NUM}"

                      echo "🔍 Verifying SQL Server setup for dev environment..."
                      echo "SQL Server: ${SQL_SERVER_NAME}.database.windows.net"
                      echo "Database: ${DATABASE_NAME}"

                      # Test basic connectivity to SQL Server
                      echo "Testing SQL Server connectivity..."
                      if az sql server show --name "${SQL_SERVER_NAME}" --resource-group $(azureResourceGroupDev) >/dev/null 2>&1; then
                        echo "✅ SQL Server is accessible"
                        
                        # Check if database exists
                        if az sql db show --name "${DATABASE_NAME}" --server "${SQL_SERVER_NAME}" --resource-group $(azureResourceGroupDev) >/dev/null 2>&1; then
                          echo "✅ Database is accessible"
                          echo "🎯 Infrastructure deployment successful - ready for application deployment"
                        else
                          echo "⚠️ Database not found - may need to be created during first app deployment"
                        fi
                      else
                        echo "❌ SQL Server not accessible - check deployment"
                        exit 1
                      fi

                - task: AzureCLI@2
                  displayName: "Destroy Dev Infrastructure"
                  condition: eq('${{ parameters.destroy }}', true)
                  continueOnError: true # Don't fail the pipeline if dev destruction has issues
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      RG_NAME="$(azureResourceGroupDev)"
                      INSTANCE_NUM="${{ parameters.instanceNumber }}"
                      KV_NAME="kv-aistock-dev-${INSTANCE_NUM}"

                      echo "=== Destroying dev infrastructure ==="
                      echo "Resource Group: $RG_NAME"
                      echo "Key Vault: $KV_NAME"

                      # First, check if resource group exists
                      echo "Checking if resource group exists: $RG_NAME"
                      if ! az group show --name "$RG_NAME" >/dev/null 2>&1; then
                        echo "ℹ️ Resource group $RG_NAME not found - already deleted or never existed"
                        echo "✅ Dev infrastructure destruction completed (nothing to destroy)"
                        exit 0
                      fi

                      echo "✅ Resource group found. Proceeding with destruction..."

                      # Check if Key Vault exists
                      echo "Checking for Key Vault: $KV_NAME"
                      KV_EXISTS=false
                      if az keyvault show --name "$KV_NAME" --resource-group "$RG_NAME" >/dev/null 2>&1; then
                        echo "✅ Key Vault found. Will be handled after resource group deletion."
                        KV_EXISTS=true
                      else
                        echo "ℹ️ Key Vault not found or already deleted."
                      fi

                      # Delete the resource group (this will soft-delete the Key Vault)
                      echo "🗑️ Deleting resource group: $RG_NAME"
                      if az group delete --name "$RG_NAME" --yes --no-wait; then
                        echo "✅ Resource group deletion initiated successfully"
                      else
                        echo "⚠️ Failed to delete resource group, but continuing..."
                        exit 0
                      fi

                      # Only attempt Key Vault purge if it existed
                      if [ "$KV_EXISTS" = true ]; then
                        echo "⏳ Waiting 60 seconds for deletion to propagate..."
                        sleep 60
                        
                        echo "🔍 Checking if Key Vault is in soft-delete state..."
                        
                        # First check if the Key Vault is actually in the deleted/soft-delete state
                        DELETED_KV=$(az keyvault list-deleted --query "[?name=='$KV_NAME'].name" --output tsv 2>/dev/null || echo "")
                        
                        if [ -n "$DELETED_KV" ]; then
                          echo "🧹 Key Vault found in soft-delete state. Attempting to purge..."
                          
                          # Try multiple times with increasing delays
                          for attempt in 1 2 3; do
                            echo "Purge attempt $attempt/3..."
                            if az keyvault purge --name "$KV_NAME" --location "${{ parameters.location }}" >/dev/null 2>&1; then
                              echo "✅ Key Vault $KV_NAME purged successfully on attempt $attempt"
                              break
                            else
                              if [ $attempt -lt 3 ]; then
                                echo "⏳ Attempt $attempt failed. Waiting 30 seconds before retry..."
                                sleep 30
                              else
                                echo "⚠️ Could not purge Key Vault after 3 attempts."
                                echo "This may happen if the Key Vault is still being processed."
                                echo "You can manually purge it later with:"
                                echo "az keyvault purge --name $KV_NAME --location '${{ parameters.location }}'"
                              fi
                            fi
                          done
                        else
                          echo "ℹ️ Key Vault is not in soft-delete state - no purge needed"
                          echo "This is normal if the Key Vault was already purged or if soft-delete is disabled"
                        fi
                      fi

                      echo "✅ Dev infrastructure destruction process completed"

  - stage: DeployProd
    displayName: "Deploy Production Infrastructure"
    dependsOn: DeployDev
    condition: and(eq('${{ parameters.environment }}', 'prod'), or(succeeded('DeployDev'), and(eq('${{ parameters.destroy }}', true), in(dependencies.DeployDev.result, 'Succeeded', 'SucceededWithIssues', 'Failed'))))
    jobs:
      - deployment: DeployProdInfrastructure
        displayName: "Deploy Prod Infrastructure"
        environment: "production-${{ parameters.instanceNumber }}"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout code"
                - task: Bash@3
                  displayName: "Docker pre-clean (global)"
                  inputs:
                    targetType: inline
                    script: |
                      docker ps -aq | xargs -r docker rm -f || true
                      docker image prune -af || true

                - task: AzureCLI@2
                  displayName: "Create Prod Resource Group"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      RG_NAME="$(azureResourceGroupProd)"
                      echo "Creating prod resource group: $RG_NAME"
                      az group create --name "$RG_NAME" --location "${{ parameters.location }}"

                - task: AzureCLI@2
                  displayName: "Validate Prod Bicep Template"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      az deployment group validate \
                        --resource-group $(azureResourceGroupProd) \
                        --template-file ./infrastructure/main.bicep \
                        --parameters ./infrastructure/parameters.prod.json \
                        --parameters location="${{ parameters.location }}" \
                        --parameters instanceNumber="${{ parameters.instanceNumber }}" \
                        --parameters containerImage="ai-stock-trade-app:latest" \
                        --parameters alphaVantageApiKey="$(ALPHA_VANTAGE_API_KEY)" \
                        --parameters twelveDataApiKey="$(TWELVE_DATA_API_KEY)" \
                        --parameters deployContainerRegistry=false \
                        --parameters sqlAdminPassword="$(SQL_ADMIN_PASSWORD)" \
                        --parameters enableAzureAdOnlyAuth=true \
                        --parameters enablePrivateSql=true \
                        --parameters vnetAddressSpace="10.61.0.0/16" \
                        --parameters appIntegrationSubnetPrefix="10.61.1.0/27" \
                        --parameters privateEndpointSubnetPrefix="10.61.2.0/28"

                - task: AzureCLI@2
                  displayName: "Deploy Prod Infrastructure"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      echo "Deploying prod infrastructure WITHOUT container registry..."
                      az deployment group create \
                        --resource-group $(azureResourceGroupProd) \
                        --template-file ./infrastructure/main.bicep \
                        --parameters ./infrastructure/parameters.prod.json \
                        --parameters location="${{ parameters.location }}" \
                        --parameters instanceNumber="${{ parameters.instanceNumber }}" \
                        --parameters containerImage="ai-stock-trade-app:latest" \
                        --parameters alphaVantageApiKey="$(ALPHA_VANTAGE_API_KEY)" \
                        --parameters twelveDataApiKey="$(TWELVE_DATA_API_KEY)" \
                        --parameters deployContainerRegistry=false \
                        --parameters sqlAdminPassword="$(SQL_ADMIN_PASSWORD)" \
                        --parameters enableAzureAdOnlyAuth=true \
                        --parameters enablePrivateSql=true \
                        --parameters vnetAddressSpace="10.61.0.0/16" \
                        --parameters appIntegrationSubnetPrefix="10.61.1.0/27" \
                        --parameters privateEndpointSubnetPrefix="10.61.2.0/28"

                - task: AzureCLI@2
                  displayName: "Set Web App Managed Identity as SQL Admin (Prod)"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      set -e
                      INSTANCE_NUM="${{ parameters.instanceNumber }}"
                      RG_NAME="rg-aistock-prod-${INSTANCE_NUM}"
                      WEBAPP_NAME="app-aistock-prod-${INSTANCE_NUM}"
                      SQL_SERVER_NAME="sql-aistock-prod-${INSTANCE_NUM}"
                      echo "[PROD] Ensuring web app managed identity present..."
                      for i in 1 2 3 4 5; do
                        PRINCIPAL_ID=$(az webapp identity show --name "$WEBAPP_NAME" --resource-group "$RG_NAME" --query principalId -o tsv 2>/dev/null || echo "")
                        if [ -n "$PRINCIPAL_ID" ] && [ "$PRINCIPAL_ID" != "null" ]; then echo "[PROD] principalId: $PRINCIPAL_ID"; break; fi
                        echo "[PROD] Identity not yet available (attempt $i); assigning..."
                        az webapp identity assign --name "$WEBAPP_NAME" --resource-group "$RG_NAME" >/dev/null || true
                        sleep 6
                      done
                      if [ -z "$PRINCIPAL_ID" ] || [ "$PRINCIPAL_ID" = "null" ]; then echo "[PROD][ERROR] Managed identity principal ID unavailable"; exit 1; fi
                      echo "[PROD] Checking current SQL Entra admin..."
                      CURRENT_ADMIN_LOGIN=$(az sql server ad-admin list --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" --query "[0].login" -o tsv 2>/dev/null || echo "")
                      CURRENT_ADMIN_OID=$(az sql server ad-admin list --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" --query "[0].sid" -o tsv 2>/dev/null || echo "")
                      if [ "$CURRENT_ADMIN_OID" = "$PRINCIPAL_ID" ]; then
                        echo "[PROD] Desired admin already set to MI ($CURRENT_ADMIN_LOGIN)."
                        if [ "$CURRENT_ADMIN_LOGIN" != "$WEBAPP_NAME" ]; then
                          echo "[PROD] Display name mismatch ($CURRENT_ADMIN_LOGIN != $WEBAPP_NAME); normalizing..."
                          az sql server ad-admin delete --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" || true
                          sleep 5
                          az sql server ad-admin create --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" --display-name "$WEBAPP_NAME" --object-id "$PRINCIPAL_ID"
                        fi
                      else
                        if [ -n "$CURRENT_ADMIN_LOGIN" ]; then
                          echo "[PROD] Existing admin '$CURRENT_ADMIN_LOGIN' (sid=$CURRENT_ADMIN_OID) differs from MI (sid=$PRINCIPAL_ID); replacing..."
                          az sql server ad-admin delete --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" || true
                          sleep 5
                        else
                          echo "[PROD] No existing Entra admin; creating new MI admin."
                        fi
                        az sql server ad-admin create --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" --display-name "$WEBAPP_NAME" --object-id "$PRINCIPAL_ID"
                      fi
                      echo "[PROD] Waiting for admin propagation..."
                      get_admin_sid_prod() {
                        local sid_any
                        sid_any=$(az sql server ad-admin list --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" --query "[0].sid" -o tsv 2>/dev/null || echo "")
                        if [ -n "$sid_any" ] && [ "$sid_any" != "null" ]; then echo "$sid_any"; return; fi
                        echo ""
                      }
                      sleep 8
                      PROPAGATED=false
                      for i in $(seq 1 24); do
                        ADMIN_OID=$(get_admin_sid_prod)
                        if [ "$ADMIN_OID" = "$PRINCIPAL_ID" ]; then echo "[PROD] Admin propagation confirmed (attempt $i)"; PROPAGATED=true; break; fi
                        echo "[PROD] Admin not propagated yet (attempt $i); current='$ADMIN_OID'; sleeping 5s..."; sleep 5
                      done
                      if [ "$PROPAGATED" != "true" ]; then
                        echo "[PROD][WARN] Propagation not confirmed after initial window. Gathering diagnostics..."
                        echo "[PROD] LIST JSON:"; az sql server ad-admin list --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" -o json || echo "(list failed)"
                        ANY_MATCH=$(az sql server ad-admin list --server "$SQL_SERVER_NAME" --resource-group "$RG_NAME" --query "[?sid=='$PRINCIPAL_ID'] | length(@)" -o tsv 2>/dev/null || echo "0")
                        if [ "$ANY_MATCH" = "1" ]; then
                          echo "[PROD][INFO] Principal ID appears in admin list despite show mismatch; proceeding (eventual consistency)."
                          PROPAGATED=true
                        fi
                      fi
                      FINAL_OID=$(get_admin_sid_prod)
                      if [ "$PROPAGATED" != "true" ] || [ "$FINAL_OID" != "$PRINCIPAL_ID" ]; then
                        echo "[PROD][ERROR] Admin assignment did not propagate correctly (expected=$PRINCIPAL_ID, final=$FINAL_OID)"; exit 1; fi
                      echo "[PROD] MI is confirmed as SQL Entra admin (sid=$FINAL_OID)."

                - task: AzureCLI@2
                  displayName: "Verify Prod Infrastructure SQL Setup"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      INSTANCE_NUM="${{ parameters.instanceNumber }}"
                      SQL_SERVER_NAME="sql-aistock-prod-${INSTANCE_NUM}"
                      DATABASE_NAME="sqldb-aistock-prod-${INSTANCE_NUM}"

                      echo "🔍 Verifying SQL Server setup for production environment..."
                      echo "SQL Server: ${SQL_SERVER_NAME}.database.windows.net"
                      echo "Database: ${DATABASE_NAME}"

                      # Test basic connectivity to SQL Server
                      echo "Testing SQL Server connectivity..."
                      if az sql server show --name "${SQL_SERVER_NAME}" --resource-group $(azureResourceGroupProd) >/dev/null 2>&1; then
                        echo "✅ SQL Server is accessible"
                        
                        # Check if database exists
                        if az sql db show --name "${DATABASE_NAME}" --server "${SQL_SERVER_NAME}" --resource-group $(azureResourceGroupProd) >/dev/null 2>&1; then
                          echo "✅ Database is accessible"
                          
                          # For production, also verify Azure AD configuration
                          echo "🔐 Checking Azure AD configuration..."
                          AD_ADMIN=$(az sql server ad-admin list --server "${SQL_SERVER_NAME}" --resource-group $(azureResourceGroupProd) --query '[0].login' --output tsv 2>/dev/null || echo "")
                          if [ -n "$AD_ADMIN" ] && [ "$AD_ADMIN" != "null" ]; then
                            echo "✅ Azure AD admin configured: $AD_ADMIN"
                            echo "🎯 Production infrastructure deployment successful - ready for application deployment"
                            echo ""
                            echo "📋 Next steps for application deployment:"
                            echo "   1. CI/CD pipeline will automatically create managed identity SQL user"
                            echo "   2. Application will use Azure AD authentication to connect"
                            echo "   3. Health checks should pass automatically"
                          else
                            echo "⚠️ Azure AD admin not configured - using SQL authentication"
                            echo "🎯 Infrastructure deployment successful - ready for application deployment"
                          fi
                        else
                          echo "⚠️ Database not found - may need to be created during first app deployment"
                        fi
                      else
                        echo "❌ SQL Server not accessible - check deployment"
                        exit 1
                      fi

                - task: AzureCLI@2
                  displayName: "Destroy Prod Infrastructure"
                  condition: eq('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      RG_NAME="$(azureResourceGroupProd)"
                      INSTANCE_NUM="${{ parameters.instanceNumber }}"
                      KV_NAME="kv-aistock-prod-${INSTANCE_NUM}"

                      echo "=== Destroying prod infrastructure ==="
                      echo "Resource Group: $RG_NAME"
                      echo "Key Vault: $KV_NAME"

                      # First, check if resource group exists
                      echo "Checking if resource group exists: $RG_NAME"
                      if ! az group show --name "$RG_NAME" >/dev/null 2>&1; then
                        echo "ℹ️ Resource group $RG_NAME not found - already deleted or never existed"
                        echo "✅ Prod infrastructure destruction completed (nothing to destroy)"
                        exit 0
                      fi

                      echo "✅ Resource group found. Proceeding with destruction..."

                      # Check if Key Vault exists
                      echo "Checking for Key Vault: $KV_NAME"
                      KV_EXISTS=false
                      if az keyvault show --name "$KV_NAME" --resource-group "$RG_NAME" >/dev/null 2>&1; then
                        echo "✅ Key Vault found. Will be handled after resource group deletion."
                        KV_EXISTS=true
                      else
                        echo "ℹ️ Key Vault not found or already deleted."
                      fi

                      # Delete the resource group (this will soft-delete the Key Vault)
                      echo "🗑️ Deleting resource group: $RG_NAME"
                      if az group delete --name "$RG_NAME" --yes --no-wait; then
                        echo "✅ Resource group deletion initiated successfully"
                      else
                        echo "⚠️ Failed to delete resource group, but continuing..."
                        exit 0
                      fi

                      # Only attempt Key Vault purge if it existed
                      if [ "$KV_EXISTS" = true ]; then
                        echo "⏳ Waiting 60 seconds for deletion to propagate..."
                        sleep 60
                        
                        echo "🔍 Checking if Key Vault is in soft-delete state..."
                        
                        # First check if the Key Vault is actually in the deleted/soft-delete state
                        DELETED_KV=$(az keyvault list-deleted --query "[?name=='$KV_NAME'].name" --output tsv 2>/dev/null || echo "")
                        
                        if [ -n "$DELETED_KV" ]; then
                          echo "🧹 Key Vault found in soft-delete state. Attempting to purge..."
                          
                          # Try multiple times with increasing delays
                          for attempt in 1 2 3; do
                            echo "Purge attempt $attempt/3..."
                            if az keyvault purge --name "$KV_NAME" --location "${{ parameters.location }}" >/dev/null 2>&1; then
                              echo "✅ Key Vault $KV_NAME purged successfully on attempt $attempt"
                              break
                            else
                              if [ $attempt -lt 3 ]; then
                                echo "⏳ Attempt $attempt failed. Waiting 30 seconds before retry..."
                                sleep 30
                              else
                                echo "⚠️ Could not purge Key Vault after 3 attempts."
                                echo "This may happen if the Key Vault is still being processed."
                                echo "You can manually purge it later with:"
                                echo "az keyvault purge --name $KV_NAME --location '${{ parameters.location }}'"
                              fi
                            fi
                          done
                        else
                          echo "ℹ️ Key Vault is not in soft-delete state - no purge needed"
                          echo "This is normal if the Key Vault was already purged or if soft-delete is disabled"
                        fi
                      fi

                      echo "✅ Prod infrastructure destruction process completed"

  - stage: DeploymentSummary
    displayName: "Deployment Summary"
    dependsOn:
      - DeployDev
      - DeployProd
    condition: and(always(), ne('${{ parameters.destroy }}', true))
    jobs:
      - job: GenerateSummary
        displayName: "Generate Deployment Summary"
        steps:
          - task: PowerShell@2
            displayName: "Generate Summary"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "## Infrastructure Deployment Summary"
                Write-Host "- **Environment Requested**: ${{ parameters.environment }}"
                Write-Host "- **Instance Number**: ${{ parameters.instanceNumber }}"
                Write-Host "- **Location**: ${{ parameters.location }}"
                Write-Host ""

                # Check Dev deployment status
                $devStatus = "$(Agent.JobStatus)"
                if ($devStatus -eq "Succeeded") {
                    Write-Host "✅ **Dev Infrastructure**: Deployed successfully"
                    Write-Host "- **Dev Resource Group**: $(azureResourceGroupDev)"
                    Write-Host "- **Dev Web App**: https://app-aistock-dev-${{ parameters.instanceNumber }}.azurewebsites.net"
                    Write-Host "- **Container Registry**: Deployed in dev environment (shared with prod)"
                } else {
                    Write-Host "❌ **Dev Infrastructure**: $devStatus"
                }

                # Check Prod deployment status if prod environment was requested
                if ("${{ parameters.environment }}" -eq "prod") {
                    $prodStatus = "$(Agent.JobStatus)"
                    if ($prodStatus -eq "Succeeded") {
                        Write-Host "✅ **Prod Infrastructure**: Deployed successfully"
                        Write-Host "- **Prod Resource Group**: $(azureResourceGroupProd)"
                        Write-Host "- **Prod Web App**: https://app-aistock-prod-${{ parameters.instanceNumber }}.azurewebsites.net"
                        Write-Host "- **Container Registry**: Uses shared registry from dev environment"
                    } else {
                        Write-Host "❌ **Prod Infrastructure**: $prodStatus"
                    }
                }
