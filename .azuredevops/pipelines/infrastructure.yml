# Azure DevOps Pipeline for Infrastructure Deployment
# Converted from GitHub Actions workflow

trigger: none # Manual trigger only

parameters:
  - name: environment
    displayName: "Environment to deploy infrastructure"
    type: string
    default: "dev"
    values:
      - dev
      - prod

  - name: location
    displayName: "Azure region for deployment"
    type: string
    default: "Canada Central"

  - name: instanceNumber
    displayName: "Instance number for resource differentiation"
    type: string
    default: "003"

  - name: destroy
    displayName: "Destroy infrastructure instead of deploy"
    type: boolean
    default: false

variables:
  - group: "ai-stock-trade-app" # Variable group for shared variables
  - name: AZURE_SERVICE_CONNECTION
    value: "svc_CSA_sub" # Replace with your Azure service connection name
  - name: azureResourceGroupDev
    value: "rg-aistock-dev-${{ parameters.instanceNumber }}"
  - name: azureResourceGroupProd
    value: "rg-aistock-prod-${{ parameters.instanceNumber }}"

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: DeployDev
    displayName: "Deploy Development Infrastructure"
    condition: or(eq('${{ parameters.environment }}', 'dev'), eq('${{ parameters.environment }}', 'prod'))
    jobs:
      - deployment: DeployDevInfrastructure
        displayName: "Deploy Dev Infrastructure"
        environment: "development-${{ parameters.instanceNumber }}"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout code"

                - task: AzureCLI@2
                  displayName: "Azure Login and Create Dev Resource Group"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      RG_NAME="$(azureResourceGroupDev)"
                      echo "Creating dev resource group: $RG_NAME"
                      az group create --name "$RG_NAME" --location "${{ parameters.location }}"

                - task: AzureCLI@2
                  displayName: "Validate Dev Bicep Template"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      az deployment group validate \
                        --resource-group $(azureResourceGroupDev) \
                        --template-file ./ai-stock-trade-app/infrastructure/main.bicep \
                        --parameters ./ai-stock-trade-app/infrastructure/parameters.dev.json \
                        --parameters location="${{ parameters.location }}" \
                        --parameters instanceNumber="${{ parameters.instanceNumber }}" \
                        --parameters containerImage="ai-stock-trade-app:latest" \
                        --parameters alphaVantageApiKey="$(ALPHA_VANTAGE_API_KEY)" \
                        --parameters twelveDataApiKey="$(TWELVE_DATA_API_KEY)" \
                        --parameters sqlAdminPassword="$(SQL_ADMIN_PASSWORD)"

                - task: AzureCLI@2
                  displayName: "Deploy Dev Infrastructure"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      echo "Deploying dev infrastructure with container registry..."
                      az deployment group create \
                        --resource-group $(azureResourceGroupDev) \
                        --template-file ./ai-stock-trade-app/infrastructure/main.bicep \
                        --parameters ./ai-stock-trade-app/infrastructure/parameters.dev.json \
                        --parameters location="${{ parameters.location }}" \
                        --parameters instanceNumber="${{ parameters.instanceNumber }}" \
                        --parameters containerImage="ai-stock-trade-app:latest" \
                        --parameters alphaVantageApiKey="$(ALPHA_VANTAGE_API_KEY)" \
                        --parameters twelveDataApiKey="$(TWELVE_DATA_API_KEY)" \
                        --parameters sqlAdminPassword="$(SQL_ADMIN_PASSWORD)"

                - task: AzureCLI@2
                  displayName: "Verify Dev Infrastructure SQL Setup"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      INSTANCE_NUM="${{ parameters.instanceNumber }}"
                      SQL_SERVER_NAME="sql-aistock-dev-${INSTANCE_NUM}"
                      DATABASE_NAME="sqldb-aistock-dev-${INSTANCE_NUM}"
                      
                      echo "üîç Verifying SQL Server setup for dev environment..."
                      echo "SQL Server: ${SQL_SERVER_NAME}.database.windows.net"
                      echo "Database: ${DATABASE_NAME}"
                      
                      # Test basic connectivity to SQL Server
                      echo "Testing SQL Server connectivity..."
                      if az sql server show --name "${SQL_SERVER_NAME}" --resource-group $(azureResourceGroupDev) >/dev/null 2>&1; then
                        echo "‚úÖ SQL Server is accessible"
                        
                        # Check if database exists
                        if az sql db show --name "${DATABASE_NAME}" --server "${SQL_SERVER_NAME}" --resource-group $(azureResourceGroupDev) >/dev/null 2>&1; then
                          echo "‚úÖ Database is accessible"
                          echo "üéØ Infrastructure deployment successful - ready for application deployment"
                        else
                          echo "‚ö†Ô∏è Database not found - may need to be created during first app deployment"
                        fi
                      else
                        echo "‚ùå SQL Server not accessible - check deployment"
                        exit 1
                      fi

                - task: AzureCLI@2
                  displayName: "Destroy Dev Infrastructure"
                  condition: eq('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      RG_NAME="$(azureResourceGroupDev)"
                      INSTANCE_NUM="${{ parameters.instanceNumber }}"
                      KV_NAME="kv-aistock-dev-${INSTANCE_NUM}"
                      
                      echo "=== Destroying dev infrastructure ==="
                      echo "Resource Group: $RG_NAME"
                      echo "Key Vault: $KV_NAME"
                      
                      # First, check if Key Vault exists
                      echo "Checking for Key Vault: $KV_NAME"
                      KV_EXISTS=false
                      if az keyvault show --name "$KV_NAME" --resource-group "$RG_NAME" >/dev/null 2>&1; then
                        echo "‚úÖ Key Vault found. Will be handled after resource group deletion."
                        KV_EXISTS=true
                      else
                        echo "‚ÑπÔ∏è Key Vault not found or already deleted."
                      fi
                      
                      # Delete the resource group (this will soft-delete the Key Vault)
                      echo "üóëÔ∏è Deleting resource group: $RG_NAME"
                      az group delete --name "$RG_NAME" --yes --no-wait
                      
                      # Only attempt Key Vault purge if it existed
                      if [ "$KV_EXISTS" = true ]; then
                        echo "‚è≥ Waiting 60 seconds for deletion to propagate..."
                        sleep 60
                        
                        echo "üßπ Attempting to purge Key Vault from soft-delete state..."
                        # Try multiple times with increasing delays
                        for attempt in 1 2 3; do
                          echo "Purge attempt $attempt/3..."
                          if az keyvault purge --name "$KV_NAME" --location "${{ parameters.location }}" >/dev/null 2>&1; then
                            echo "‚úÖ Key Vault $KV_NAME purged successfully on attempt $attempt"
                            break
                          else
                            if [ $attempt -lt 3 ]; then
                              echo "‚è≥ Attempt $attempt failed. Waiting 30 seconds before retry..."
                              sleep 30
                            else
                              echo "‚ö†Ô∏è Could not purge Key Vault after 3 attempts."
                              echo "This may happen if the Key Vault is still being processed."
                              echo "You can manually purge it later with:"
                              echo "az keyvault purge --name $KV_NAME --location '${{ parameters.location }}'"
                            fi
                          fi
                        done
                      fi
                      
                      echo "‚úÖ Dev infrastructure destruction process completed"

  - stage: DeployProd
    displayName: "Deploy Production Infrastructure"
    dependsOn: DeployDev
    condition: and(eq('${{ parameters.environment }}', 'prod'), succeeded('DeployDev'))
    jobs:
      - deployment: DeployProdInfrastructure
        displayName: "Deploy Prod Infrastructure"
        environment: "production-${{ parameters.instanceNumber }}"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout code"

                - task: AzureCLI@2
                  displayName: "Create Prod Resource Group"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      RG_NAME="$(azureResourceGroupProd)"
                      echo "Creating prod resource group: $RG_NAME"
                      az group create --name "$RG_NAME" --location "${{ parameters.location }}"

                - task: AzureCLI@2
                  displayName: "Validate Prod Bicep Template"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      az deployment group validate \
                        --resource-group $(azureResourceGroupProd) \
                        --template-file ./ai-stock-trade-app/infrastructure/main.bicep \
                        --parameters ./ai-stock-trade-app/infrastructure/parameters.prod.json \
                        --parameters location="${{ parameters.location }}" \
                        --parameters instanceNumber="${{ parameters.instanceNumber }}" \
                        --parameters containerImage="ai-stock-trade-app:latest" \
                        --parameters alphaVantageApiKey="$(ALPHA_VANTAGE_API_KEY)" \
                        --parameters twelveDataApiKey="$(TWELVE_DATA_API_KEY)" \
                        --parameters deployContainerRegistry=false \
                        --parameters sqlAdminPassword="$(SQL_ADMIN_PASSWORD)"

                - task: AzureCLI@2
                  displayName: "Deploy Prod Infrastructure"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      echo "Deploying prod infrastructure WITHOUT container registry..."
                      az deployment group create \
                        --resource-group $(azureResourceGroupProd) \
                        --template-file ./ai-stock-trade-app/infrastructure/main.bicep \
                        --parameters ./ai-stock-trade-app/infrastructure/parameters.prod.json \
                        --parameters location="${{ parameters.location }}" \
                        --parameters instanceNumber="${{ parameters.instanceNumber }}" \
                        --parameters containerImage="ai-stock-trade-app:latest" \
                        --parameters alphaVantageApiKey="$(ALPHA_VANTAGE_API_KEY)" \
                        --parameters twelveDataApiKey="$(TWELVE_DATA_API_KEY)" \
                        --parameters deployContainerRegistry=false \
                        --parameters sqlAdminPassword="$(SQL_ADMIN_PASSWORD)"

                - task: AzureCLI@2
                  displayName: "Verify Prod Infrastructure SQL Setup"
                  condition: ne('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      INSTANCE_NUM="${{ parameters.instanceNumber }}"
                      SQL_SERVER_NAME="sql-aistock-prod-${INSTANCE_NUM}"
                      DATABASE_NAME="sqldb-aistock-prod-${INSTANCE_NUM}"
                      
                      echo "üîç Verifying SQL Server setup for production environment..."
                      echo "SQL Server: ${SQL_SERVER_NAME}.database.windows.net"
                      echo "Database: ${DATABASE_NAME}"
                      
                      # Test basic connectivity to SQL Server
                      echo "Testing SQL Server connectivity..."
                      if az sql server show --name "${SQL_SERVER_NAME}" --resource-group $(azureResourceGroupProd) >/dev/null 2>&1; then
                        echo "‚úÖ SQL Server is accessible"
                        
                        # Check if database exists
                        if az sql db show --name "${DATABASE_NAME}" --server "${SQL_SERVER_NAME}" --resource-group $(azureResourceGroupProd) >/dev/null 2>&1; then
                          echo "‚úÖ Database is accessible"
                          
                          # For production, also verify Azure AD configuration
                          echo "üîê Checking Azure AD configuration..."
                          AD_ADMIN=$(az sql server ad-admin list --server "${SQL_SERVER_NAME}" --resource-group $(azureResourceGroupProd) --query '[0].login' --output tsv 2>/dev/null || echo "")
                          if [ -n "$AD_ADMIN" ] && [ "$AD_ADMIN" != "null" ]; then
                            echo "‚úÖ Azure AD admin configured: $AD_ADMIN"
                            echo "üéØ Production infrastructure deployment successful - ready for application deployment"
                            echo ""
                            echo "üìã Next steps for application deployment:"
                            echo "   1. CI/CD pipeline will automatically create managed identity SQL user"
                            echo "   2. Application will use Azure AD authentication to connect"
                            echo "   3. Health checks should pass automatically"
                          else
                            echo "‚ö†Ô∏è Azure AD admin not configured - using SQL authentication"
                            echo "üéØ Infrastructure deployment successful - ready for application deployment"
                          fi
                        else
                          echo "‚ö†Ô∏è Database not found - may need to be created during first app deployment"
                        fi
                      else
                        echo "‚ùå SQL Server not accessible - check deployment"
                        exit 1
                      fi

                - task: AzureCLI@2
                  displayName: "Destroy Prod Infrastructure"
                  condition: eq('${{ parameters.destroy }}', true)
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      RG_NAME="$(azureResourceGroupProd)"
                      INSTANCE_NUM="${{ parameters.instanceNumber }}"
                      KV_NAME="kv-aistock-prod-${INSTANCE_NUM}"
                      
                      echo "=== Destroying prod infrastructure ==="
                      echo "Resource Group: $RG_NAME"
                      echo "Key Vault: $KV_NAME"
                      
                      # First, check if Key Vault exists
                      echo "Checking for Key Vault: $KV_NAME"
                      KV_EXISTS=false
                      if az keyvault show --name "$KV_NAME" --resource-group "$RG_NAME" >/dev/null 2>&1; then
                        echo "‚úÖ Key Vault found. Will be handled after resource group deletion."
                        KV_EXISTS=true
                      else
                        echo "‚ÑπÔ∏è Key Vault not found or already deleted."
                      fi
                      
                      # Delete the resource group (this will soft-delete the Key Vault)
                      echo "üóëÔ∏è Deleting resource group: $RG_NAME"
                      az group delete --name "$RG_NAME" --yes --no-wait
                      
                      # Only attempt Key Vault purge if it existed
                      if [ "$KV_EXISTS" = true ]; then
                        echo "‚è≥ Waiting 60 seconds for deletion to propagate..."
                        sleep 60
                        
                        echo "üßπ Attempting to purge Key Vault from soft-delete state..."
                        # Try multiple times with increasing delays
                        for attempt in 1 2 3; do
                          echo "Purge attempt $attempt/3..."
                          if az keyvault purge --name "$KV_NAME" --location "${{ parameters.location }}" >/dev/null 2>&1; then
                            echo "‚úÖ Key Vault $KV_NAME purged successfully on attempt $attempt"
                            break
                          else
                            if [ $attempt -lt 3 ]; then
                              echo "‚è≥ Attempt $attempt failed. Waiting 30 seconds before retry..."
                              sleep 30
                            else
                              echo "‚ö†Ô∏è Could not purge Key Vault after 3 attempts."
                              echo "This may happen if the Key Vault is still being processed."
                              echo "You can manually purge it later with:"
                              echo "az keyvault purge --name $KV_NAME --location '${{ parameters.location }}'"
                            fi
                          fi
                        done
                      fi
                      
                      echo "‚úÖ Prod infrastructure destruction process completed"

  - stage: DeploymentSummary
    displayName: "Deployment Summary"
    dependsOn:
      - DeployDev
      - DeployProd
    condition: and(always(), ne('${{ parameters.destroy }}', true))
    jobs:
      - job: GenerateSummary
        displayName: "Generate Deployment Summary"
        steps:
          - task: PowerShell@2
            displayName: "Generate Summary"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "## Infrastructure Deployment Summary"
                Write-Host "- **Environment Requested**: ${{ parameters.environment }}"
                Write-Host "- **Instance Number**: ${{ parameters.instanceNumber }}"
                Write-Host "- **Location**: ${{ parameters.location }}"
                Write-Host ""

                # Check Dev deployment status
                $devStatus = "$(Agent.JobStatus)"
                if ($devStatus -eq "Succeeded") {
                    Write-Host "‚úÖ **Dev Infrastructure**: Deployed successfully"
                    Write-Host "- **Dev Resource Group**: $(azureResourceGroupDev)"
                    Write-Host "- **Dev Web App**: https://app-aistock-dev-${{ parameters.instanceNumber }}.azurewebsites.net"
                    Write-Host "- **Container Registry**: Deployed in dev environment (shared with prod)"
                } else {
                    Write-Host "‚ùå **Dev Infrastructure**: $devStatus"
                }

                # Check Prod deployment status if prod environment was requested
                if ("${{ parameters.environment }}" -eq "prod") {
                    $prodStatus = "$(Agent.JobStatus)"
                    if ($prodStatus -eq "Succeeded") {
                        Write-Host "‚úÖ **Prod Infrastructure**: Deployed successfully"
                        Write-Host "- **Prod Resource Group**: $(azureResourceGroupProd)"
                        Write-Host "- **Prod Web App**: https://app-aistock-prod-${{ parameters.instanceNumber }}.azurewebsites.net"
                        Write-Host "- **Container Registry**: Uses shared registry from dev environment"
                    } else {
                        Write-Host "‚ùå **Prod Infrastructure**: $prodStatus"
                    }
                }
