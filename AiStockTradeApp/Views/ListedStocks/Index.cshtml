@{
    ViewData["Title"] = "Listed Stocks";
}

<div class="container">
  <header class="app-header">
    <h1>Listed Stocks</h1>
    <div class="header-controls">
      <a class="control-btn" href="@Url.Action("Dashboard","Stock")">← Back to Dashboard</a>
    </div>
  </header>

  <div class="search-bar">
    <div class="search-container" style="gap:8px;display:flex;flex-wrap:wrap;align-items:center;">
      <input id="q" type="text" placeholder="Search symbol or company name" style="min-width:240px" />
      <select id="sector" style="min-width:200px"><option value="">All Sectors</option></select>
      <select id="industry" style="min-width:240px"><option value="">All Industries</option></select>
      <button id="apply-filters">Apply</button>
      <span id="result-count" style="margin-left:8px;color:#666"></span>
    </div>
  </div>

  <!-- Move history panel above the list/table -->
  <div id="history-panel" style="display:none;margin-top:16px;border:1px solid #ddd;border-radius:8px;padding:12px;">
    <div style="display:flex;align-items:center;gap:8px;">
      <h3 id="hist-title" style="margin:0;">Historical Prices</h3>
      <span id="hist-range" style="color:#666"></span>
    </div>
    <canvas id="hist-chart" height="80" style="width:100%;max-height:120px;margin-top:8px;background:#fafafa;border:1px solid #eee;"></canvas>
    <div id="hist-table-wrap" style="overflow:auto;max-height:260px;margin-top:8px;">
      <table class="data-table" style="width:100%;border-collapse:collapse;">
        <thead><tr><th style="text-align:left;">Date</th><th style="text-align:right;">Open</th><th style="text-align:right;">High</th><th style="text-align:right;">Low</th><th style="text-align:right;">Close</th><th style="text-align:right;">Volume</th></tr></thead>
        <tbody id="hist-body"></tbody>
      </table>
    </div>
  </div>

  <div style="overflow:auto;">
    <table id="stocks-table" class="data-table" style="width:100%;border-collapse:collapse;">
      <thead>
        <tr>
          <th style="text-align:left;">Symbol</th>
          <th style="text-align:left;">Name</th>
          <th style="text-align:left;">Sector</th>
          <th style="text-align:left;">Industry</th>
          <th style="text-align:right;">Last</th>
          <th style="text-align:right;">% Change</th>
          <th style="text-align:right;">Market Cap</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <div class="pagination" style="margin-top:12px;display:flex;gap:8px;align-items:center;">
    <button id="prev-page">Prev</button>
    <span id="page-info"></span>
    <button id="next-page">Next</button>
    <select id="page-size" style="margin-left:auto">
      <option value="25">25</option>
      <option value="50" selected>50</option>
      <option value="100">100</option>
    </select>
  </div>
</div>

@section Scripts {
<script>
(function(){
  const state = { page: 1, pageSize: 50, total: 0, q: '', sector: '', industry: '' };

  async function fetchFacets(){
    try {
      const res = await fetch('@Url.Action("Facets","ListedStocks")');
      const data = await res.json();
      const sectorSel = document.getElementById('sector');
      const industrySel = document.getElementById('industry');
      data.sectors.forEach(s => { const opt = document.createElement('option'); opt.value = s; opt.textContent = s; sectorSel.appendChild(opt); });
      data.industries.forEach(s => { const opt = document.createElement('option'); opt.value = s; opt.textContent = s; industrySel.appendChild(opt); });
    } catch(e) { console.warn('Facets load failed', e); }
  }

  function fmtMoney(v){ return (v||0).toLocaleString(undefined,{minimumFractionDigits:2, maximumFractionDigits:2}); }
  function fmtPct(v){ return ((v||0)).toFixed(2) + '%'; }
  function fmtCap(v){ if(!v) return ''; const n = Number(v); if(n>=1e12) return (n/1e12).toFixed(2)+'T'; if(n>=1e9) return (n/1e9).toFixed(2)+'B'; if(n>=1e6) return (n/1e6).toFixed(2)+'M'; return n.toLocaleString(); }

  async function load(){
    const params = new URLSearchParams({ q: state.q||'', sector: state.sector||'', industry: state.industry||'', page: state.page, pageSize: state.pageSize });
    const res = await fetch('@Url.Action("Data","ListedStocks")?' + params.toString());
    const data = await res.json();
    state.total = data.total || 0;
    renderTable(data.items || []);
    renderPager();
    document.getElementById('result-count').textContent = `${state.total.toLocaleString()} results`;
  }

  function renderTable(items){
    const tbody = document.querySelector('#stocks-table tbody');
    tbody.innerHTML = '';
    for(const it of items){
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td><a class="symbol-link" data-symbol="${it.symbol}" href="#">${it.symbol}</a></td>
        <td>${it.name}</td>
        <td>${it.sector||''}</td>
        <td>${it.industry||''}</td>
        <td style="text-align:right;">$${fmtMoney(it.lastSale)}</td>
        <td style="text-align:right;">${fmtPct(it.percentChange)}</td>
        <td style="text-align:right;">${fmtCap(it.marketCap)}</td>`;
      tbody.appendChild(tr);
    }

    // attach symbol click handlers
    tbody.querySelectorAll('a.symbol-link').forEach(a => {
      a.addEventListener('click', async (e) => {
        e.preventDefault();
        const sym = a.getAttribute('data-symbol');
        await loadHistory(sym);
      });
    });
  }

  function renderPager(){
    const totalPages = Math.max(1, Math.ceil(state.total / state.pageSize));
    document.getElementById('page-info').textContent = `Page ${state.page} of ${totalPages}`;
    document.getElementById('prev-page').disabled = state.page <= 1;
    document.getElementById('next-page').disabled = state.page >= totalPages;
  }

  // Events
  document.getElementById('apply-filters').addEventListener('click', () => {
    state.q = document.getElementById('q').value.trim();
    state.sector = document.getElementById('sector').value;
    state.industry = document.getElementById('industry').value;
    state.page = 1;
    load();
  });
  document.getElementById('prev-page').addEventListener('click', () => { if(state.page>1){ state.page--; load(); }});
  document.getElementById('next-page').addEventListener('click', () => { const totalPages = Math.max(1, Math.ceil(state.total / state.pageSize)); if(state.page<totalPages){ state.page++; load(); }});
  document.getElementById('page-size').addEventListener('change', (e) => { state.pageSize = parseInt(e.target.value,10)||50; state.page=1; load(); });

  fetchFacets().then(load);

  async function loadHistory(symbol){
    const panel = document.getElementById('history-panel');
    const title = document.getElementById('hist-title');
    const rangeEl = document.getElementById('hist-range');
    const body = document.getElementById('hist-body');
    const canvas = document.getElementById('hist-chart');
    const ctx = canvas.getContext('2d');
    title.textContent = `Historical Prices: ${symbol}`;
    rangeEl.textContent = 'loading...';
    body.innerHTML = '<tr><td colspan="6">Loading...</td></tr>';
    panel.style.display = 'block';
  try { panel.scrollIntoView({ behavior: 'smooth', block: 'start' }); } catch {}

    try {
      const res = await fetch('@Url.Action("Historical","ListedStocks")?symbol=' + encodeURIComponent(symbol) + '&take=120');
      const rows = await res.json();
      if(!Array.isArray(rows) || rows.length === 0){
        body.innerHTML = '<tr><td colspan="6">No historical data</td></tr>';
        rangeEl.textContent = '';
        ctx.clearRect(0,0,canvas.width,canvas.height);
        return;
      }
      // sort by date ascending
      rows.sort((a,b)=> new Date(a.date) - new Date(b.date));
      const first = rows[0].date?.substring(0,10) || '';
      const last = rows[rows.length-1].date?.substring(0,10) || '';
      rangeEl.textContent = `${first} → ${last} (${rows.length})`;

      // table
      body.innerHTML = '';
      for(const r of rows.slice().reverse()){
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${(r.date||'').substring(0,10)}</td>
                        <td style="text-align:right;">$${fmtMoney(r.open)}</td>
                        <td style="text-align:right;">$${fmtMoney(r.high)}</td>
                        <td style="text-align:right;">$${fmtMoney(r.low)}</td>
                        <td style="text-align:right;">$${fmtMoney(r.close)}</td>
                        <td style="text-align:right;">${(r.volume||0).toLocaleString()}</td>`;
        body.appendChild(tr);
      }

      // mini line chart of closes
      const closes = rows.map(r => Number(r.close||0));
      const w = canvas.clientWidth || 800;
      canvas.width = w; // ensure correct pixel width
      const h = canvas.height;
      ctx.clearRect(0,0,w,h);
      const min = Math.min(...closes);
      const max = Math.max(...closes);
      const pad = 6;
      const n = closes.length;
      const xStep = (w - pad*2) / Math.max(1, n-1);
      function y(v){
        if(max===min) return h/2; 
        return h - pad - ((v - min) / (max - min)) * (h - pad*2);
      }
      ctx.lineWidth = 1.5;
      ctx.strokeStyle = '#0a84ff';
      ctx.beginPath();
      for(let i=0;i<n;i++){
        const x = pad + i * xStep;
        const yv = y(closes[i]);
        if(i===0) ctx.moveTo(x,yv); else ctx.lineTo(x,yv);
      }
      ctx.stroke();
      // area fill
      const grad = ctx.createLinearGradient(0,0,0,h);
      grad.addColorStop(0,'rgba(10,132,255,0.25)');
      grad.addColorStop(1,'rgba(10,132,255,0.0)');
      ctx.fillStyle = grad;
      ctx.lineTo(pad + (n-1)*xStep, h-pad);
      ctx.lineTo(pad, h-pad);
      ctx.closePath();
      ctx.fill();
    } catch(err){
      body.innerHTML = `<tr><td colspan="6">Error loading history: ${err}</td></tr>`;
      rangeEl.textContent = '';
      ctx.clearRect(0,0,canvas.width,canvas.height);
    }
  }
})();
</script>
}
