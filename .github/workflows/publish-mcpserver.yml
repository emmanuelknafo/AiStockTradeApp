name: Publish MCP Server to NuGet

# Trigger on pushes to main branch when non-.md files in MCP Server project are modified
on:
  push:
    branches: [ main ]
    paths:
      - 'AiStockTradeApp.McpServer/**'
      - '.github/workflows/publish-mcpserver.yml'
      - '!AiStockTradeApp.McpServer/**/*.md'

  # Allow manual trigger for testing
  workflow_dispatch:

env:
  # Project path
  PROJECT_PATH: 'AiStockTradeApp.McpServer/AiStockTradeApp.McpServer.csproj'
  # Configuration
  BUILD_CONFIGURATION: 'Release'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
      packages: write  # Required for publishing packages
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for proper versioning
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.x'
        dotnet-quality: 'preview'

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build project
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore -p:PublishTarget=NuGet

    # Tests skipped for MCP Server publishing workflow
    # The MCP Server project focuses on packaging and distribution
    # Unit tests are handled in separate CI workflows

    - name: Check for MCP Server changes
      id: changes
      run: |
        # Check if there are changes in the MCP Server project since last release
        LAST_TAG=$(git describe --tags --abbrev=0 --match="mcpserver-v*" 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "No previous release found, treating as first release"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "change_type=initial" >> $GITHUB_OUTPUT
        else
          echo "Last release tag: $LAST_TAG"
          
          # Check for changes in MCP Server directory since last tag
          CHANGES=$(git diff --name-only $LAST_TAG HEAD -- AiStockTradeApp.McpServer/ || echo "changes")
          
          if [ -n "$CHANGES" ]; then
            echo "Changes detected in MCP Server since $LAST_TAG:"
            echo "$CHANGES"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "change_type=update" >> $GITHUB_OUTPUT
            
            # Determine change severity based on file types
            if echo "$CHANGES" | grep -q "\.cs$"; then
              echo "Code changes detected - incrementing minor version"
              echo "increment_type=minor" >> $GITHUB_OUTPUT
            elif echo "$CHANGES" | grep -q -E "\.(csproj|json)$"; then
              echo "Configuration changes detected - incrementing patch version"
              echo "increment_type=patch" >> $GITHUB_OUTPUT
            else
              echo "Documentation/other changes detected - incrementing patch version"
              echo "increment_type=patch" >> $GITHUB_OUTPUT
            fi
          else
            echo "No changes detected in MCP Server since $LAST_TAG"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "change_type=none" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Check for version changes
      id: version-check
      run: |
        # Extract version from csproj file
        VERSION=$(grep -oP '<PackageVersion>\K[^<]*' ${{ env.PROJECT_PATH }})
        echo "Current version: $VERSION"
        
        # For GitHub Actions publishing to NuGet.org, use the known package ID
        PACKAGE_ID="devopsabcs.AiStockTradeMcpServer"
        echo "Package ID: $PACKAGE_ID"
        echo "package_id=$PACKAGE_ID" >> $GITHUB_OUTPUT
        
        # Check if version exists on NuGet (this will fail if version doesn't exist, which is what we want)
        # Try both case-sensitive and case-insensitive package IDs due to NuGet normalization
        PACKAGE_ID_LOWER=$(echo "$PACKAGE_ID" | tr '[:upper:]' '[:lower:]')
        
        if curl -f -s "https://api.nuget.org/v3-flatcontainer/$PACKAGE_ID_LOWER/$VERSION/$PACKAGE_ID_LOWER.$VERSION.nupkg" > /dev/null 2>&1; then
          echo "Version $VERSION already exists on NuGet.org (package: $PACKAGE_ID_LOWER)"
          echo "should_publish=false" >> $GITHUB_OUTPUT
          echo "existing_version=$VERSION" >> $GITHUB_OUTPUT
        elif curl -f -s "https://api.nuget.org/v3-flatcontainer/$PACKAGE_ID/$VERSION/$PACKAGE_ID.$VERSION.nupkg" > /dev/null 2>&1; then
          echo "Version $VERSION already exists on NuGet.org (package: $PACKAGE_ID)"
          echo "should_publish=false" >> $GITHUB_OUTPUT
          echo "existing_version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "Version $VERSION does not exist on NuGet.org, proceeding with publish"
          echo "should_publish=true" >> $GITHUB_OUTPUT
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Auto-increment version based on changes
      id: auto-increment
      if: steps.changes.outputs.has_changes == 'true' && (steps.version-check.outputs.should_publish == 'false' || steps.changes.outputs.change_type == 'initial')
      run: |
        CURRENT_VERSION="${{ steps.version-check.outputs.version }}"
        INCREMENT_TYPE="${{ steps.changes.outputs.increment_type }}"
        CHANGE_TYPE="${{ steps.changes.outputs.change_type }}"
        
        if [ "$CHANGE_TYPE" == "initial" ]; then
          echo "Initial release, using current version: $CURRENT_VERSION"
          NEW_VERSION="$CURRENT_VERSION"
        else
          echo "Auto-incrementing version from $CURRENT_VERSION (increment type: $INCREMENT_TYPE)"
          
          # Parse version parts (supports formats like 1.0.0-beta, 1.0.0-beta.1, etc.)
          if [[ $CURRENT_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-[a-zA-Z]+)?(\.[0-9]+)?$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            PRERELEASE=${BASH_REMATCH[4]}
            BUILD=${BASH_REMATCH[5]}
            
            # Increment based on change type and current version format
            if [[ -n "$BUILD" ]]; then
              # Has build number (e.g., 1.0.0-beta.1), increment build
              NEW_BUILD=$((${BUILD#.} + 1))
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}${PRERELEASE}.${NEW_BUILD}"
            elif [[ -n "$PRERELEASE" ]]; then
              # Has prerelease but no build (e.g., 1.0.0-beta), add .1
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}${PRERELEASE}.1"
            else
              # Release version - increment based on change type
              if [ "$INCREMENT_TYPE" == "minor" ]; then
                NEW_MINOR=$((MINOR + 1))
                NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"
              else
                # Default to patch increment
                NEW_PATCH=$((PATCH + 1))
                NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
              fi
            fi
          else
            echo "Could not parse version format, falling back to basic increment"
            NEW_VERSION="${CURRENT_VERSION}.1"
          fi
        fi
        
        echo "New version: $NEW_VERSION"
        
        # Update csproj file
        sed -i "s|<PackageVersion>$CURRENT_VERSION</PackageVersion>|<PackageVersion>$NEW_VERSION</PackageVersion>|" ${{ env.PROJECT_PATH }}
        
        # Update .mcp/server-nuget.json (the source for NuGet packages)
        sed -i "s|\"version\": \"$CURRENT_VERSION\"|\"version\": \"$NEW_VERSION\"|" AiStockTradeApp.McpServer/.mcp/server-nuget.json
        
        # Also update the main server.json if it exists
        if [ -f "AiStockTradeApp.McpServer/.mcp/server.json" ]; then
          sed -i "s|\"version\": \"$CURRENT_VERSION\"|\"version\": \"$NEW_VERSION\"|" AiStockTradeApp.McpServer/.mcp/server.json
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "should_publish=true" >> $GITHUB_OUTPUT
        echo "auto_incremented=true" >> $GITHUB_OUTPUT

    - name: Commit version changes
      if: steps.auto-increment.outputs.auto_incremented == 'true'
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add modified files
        git add ${{ env.PROJECT_PATH }} AiStockTradeApp.McpServer/.mcp/server-nuget.json
        if [ -f "AiStockTradeApp.McpServer/.mcp/server.json" ]; then
          git add AiStockTradeApp.McpServer/.mcp/server.json
        fi
        
        # Commit and push changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-increment MCP Server version to ${{ steps.auto-increment.outputs.version }} [skip ci]"
          git push
          echo "Version changes committed and pushed"
        fi

    - name: Use auto-incremented version
      id: final-version
      run: |
        # If no changes detected, skip publishing unless forced
        if [[ "${{ steps.changes.outputs.has_changes }}" == "false" ]]; then
          echo "No changes detected in MCP Server - skipping publish"
          echo "should_publish=false" >> $GITHUB_OUTPUT
          echo "version=${{ steps.version-check.outputs.version }}" >> $GITHUB_OUTPUT
          echo "package_id=${{ steps.version-check.outputs.package_id }}" >> $GITHUB_OUTPUT
          echo "skip_reason=no_changes" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.auto-increment.outputs.auto_incremented }}" == "true" ]]; then
          echo "version=${{ steps.auto-increment.outputs.version }}" >> $GITHUB_OUTPUT
          echo "should_publish=${{ steps.auto-increment.outputs.should_publish }}" >> $GITHUB_OUTPUT
          echo "package_id=${{ steps.version-check.outputs.package_id }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ steps.version-check.outputs.version }}" >> $GITHUB_OUTPUT
          echo "should_publish=${{ steps.version-check.outputs.should_publish }}" >> $GITHUB_OUTPUT
          echo "package_id=${{ steps.version-check.outputs.package_id }}" >> $GITHUB_OUTPUT
        fi

    - name: Pack project
      if: steps.final-version.outputs.should_publish == 'true'
      run: dotnet pack ${{ env.PROJECT_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --output ./nupkg -p:PublishTarget=NuGet

    - name: Validate package contents
      if: steps.final-version.outputs.should_publish == 'true'
      run: |
        echo "Checking package contents..."
        PACKAGE_FILE=$(find ./nupkg -name "*.nupkg" | head -1)
        if [ -z "$PACKAGE_FILE" ]; then
          echo "No package file found!"
          exit 1
        fi
        
        echo "Package file: $PACKAGE_FILE"
        
        # Check if .mcp/server.json is included in the package
        if unzip -l "$PACKAGE_FILE" | grep -q ".mcp/server.json"; then
          echo "✅ .mcp/server.json found in package"
        else
          echo "❌ .mcp/server.json not found in package"
          exit 1
        fi
        
        # Check if README.md is included
        if unzip -l "$PACKAGE_FILE" | grep -q "README.md"; then
          echo "✅ README.md found in package"
        else
          echo "❌ README.md not found in package"
          exit 1
        fi
        
        echo "Package validation completed successfully"

    - name: Publish to NuGet.org
      if: steps.final-version.outputs.should_publish == 'true'
      run: |
        echo "Publishing package to NuGet.org..."
        dotnet nuget push ./nupkg/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate \
          --no-service-endpoint
        
        if [ $? -eq 0 ]; then
          echo "✅ Package published successfully (or skipped as duplicate)"
        else
          echo "❌ Package publish failed"
          exit 1
        fi

    - name: Create GitHub release
      if: steps.final-version.outputs.should_publish == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if release already exists
        TAG_NAME="mcpserver-v${{ steps.final-version.outputs.version }}"
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "Release $TAG_NAME already exists, skipping creation"
          echo "Updating existing release with new assets..."
          # Upload package to existing release
          gh release upload "$TAG_NAME" ./nupkg/*.nupkg --clobber || echo "Failed to upload assets, continuing..."
        else
          echo "Creating new release $TAG_NAME..."
          # Create release with GitHub CLI
          gh release create "$TAG_NAME" \
            --title "MCP Server v${{ steps.final-version.outputs.version }}" \
            --notes "🚀 **AI Stock Trade MCP Server v${{ steps.final-version.outputs.version }}**

        Published to NuGet.org as \`${{ steps.final-version.outputs.package_id }}\`

        ### Installation

        Configure in your MCP client (VS Code or Visual Studio):

        \`\`\`json
        {
          \"servers\": {
            \"${{ steps.final-version.outputs.package_id }}\": {
              \"type\": \"stdio\",
              \"command\": \"dotnet\",
              \"args\": [
                \"tool\",
                \"run\",
                \"${{ steps.final-version.outputs.package_id }}\"
              ],
              \"env\": {
                \"STOCK_API_BASE_URL\": \"https://your-api-url.com\"
              }
            }
          }
        }
        \`\`\`

        ### What's Included
        - 🔌 MCP Server with stock trading tools
        - 📊 Real-time stock quotes
        - 📈 Historical data access
        - 🔍 Stock symbol search
        - 🏢 Company details lookup
        - ❤️ System health monitoring

        View on NuGet.org: https://www.nuget.org/packages/${{ steps.final-version.outputs.package_id }}/${{ steps.final-version.outputs.version }}" \
            $(if [[ "${{ steps.final-version.outputs.version }}" == *"beta"* ]] || [[ "${{ steps.final-version.outputs.version }}" == *"alpha"* ]] || [[ "${{ steps.final-version.outputs.version }}" == *"preview"* ]]; then echo "--prerelease"; fi) \
            ./nupkg/*.nupkg
        fi

    - name: Add summary
      if: steps.final-version.outputs.should_publish == 'true'
      run: |
        echo "## 🎉 MCP Server Published Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Package:** \`${{ steps.final-version.outputs.package_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`${{ steps.final-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**NuGet URL:** https://www.nuget.org/packages/${{ steps.final-version.outputs.package_id }}/${{ steps.final-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.auto-increment.outputs.auto_incremented }}" == "true" ]]; then
          echo "**Auto-incremented:** Version was automatically bumped from existing version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo "Configure in your MCP client to start using the stock trading tools!" >> $GITHUB_STEP_SUMMARY

    - name: Skip publish summary
      if: steps.final-version.outputs.should_publish == 'false'
      run: |
        echo "## ⏭️ Publish Skipped" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All versions were already published or auto-increment failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "To publish a new version manually:" >> $GITHUB_STEP_SUMMARY
        echo "1. Update the \`<PackageVersion>\` in the .csproj file" >> $GITHUB_STEP_SUMMARY
        echo "2. Update the version in \`.mcp/server.json\`" >> $GITHUB_STEP_SUMMARY
        echo "3. Commit and push the changes" >> $GITHUB_STEP_SUMMARY
