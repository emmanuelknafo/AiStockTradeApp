name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - '**/README.md'
      - 'docs/**'
      - '*.txt'
      - '.gitignore'
      - '.vscode/**'
      - '.vs/**'
      - 'AGENTS.md'
      - 'LICENSE'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '**/README.md'
      - 'docs/**'
      - '*.txt'
      - '.gitignore'
      - '.vscode/**'
      - '.vs/**'
      - 'AGENTS.md'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - dev
          - prod
      instanceNumber:
        description: 'Instance number for resource differentiation'
        required: true
        default: '001'
        type: string

env:
  AZURE_WEBAPP_PACKAGE_PATH: "."
  DOTNET_VERSION: "9.0.x"

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal

  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Push Container
    outputs:
      image: ${{ steps.final-output.outputs.image }}
      test_output: ${{ steps.final-output.outputs.test_output }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login for Registry Access
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Get Container Registry Information
        id: registry
        run: |
          # Determine environment and instance number
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            ENV="prod"
          else
            ENV="dev"
          fi
          
          INSTANCE_NUM="${{ github.event.inputs.instanceNumber || '001' }}"
          RG_NAME="rg-aistock-${ENV}-${INSTANCE_NUM}"
          
          echo "Environment: ${ENV}"
          echo "Instance Number: ${INSTANCE_NUM}"
          echo "Resource Group: ${RG_NAME}"
          
          # Get container registry name from resource group
          REGISTRY_NAME=$(az acr list --resource-group "${RG_NAME}" --query '[0].name' --output tsv)
          
          if [ -z "${REGISTRY_NAME}" ] || [ "${REGISTRY_NAME}" == "null" ]; then
            echo "ERROR: No container registry found in resource group ${RG_NAME}"
            echo "Available resource groups:"
            az group list --query '[].name' --output table
            exit 1
          fi
          
          echo "Found registry: ${REGISTRY_NAME}"
          echo "registry_name=${REGISTRY_NAME}" >> $GITHUB_OUTPUT
          echo "resource_group=${RG_NAME}" >> $GITHUB_OUTPUT

      - name: Get Container Registry Credentials
        id: registry-creds
        run: |
          REGISTRY_NAME="${{ steps.registry.outputs.registry_name }}"
          RG_NAME="${{ steps.registry.outputs.resource_group }}"
          
          # Get admin credentials
          REGISTRY_USERNAME=$(az acr credential show --name "${REGISTRY_NAME}" --query 'username' --output tsv)
          REGISTRY_PASSWORD=$(az acr credential show --name "${REGISTRY_NAME}" --query 'passwords[0].value' --output tsv)
          
          echo "Registry Username: ${REGISTRY_USERNAME}"
          echo "Password length: ${#REGISTRY_PASSWORD}"
          
          echo "registry_username=${REGISTRY_USERNAME}" >> $GITHUB_OUTPUT
          echo "registry_password=${REGISTRY_PASSWORD}" >> $GITHUB_OUTPUT

      - name: Debug Registry Information
        run: |
          echo "=== REGISTRY DEBUG INFO ==="
          echo "Registry name: ${{ steps.registry.outputs.registry_name }}"
          echo "Resource group: ${{ steps.registry.outputs.resource_group }}"
          echo "Registry URL: ${{ steps.registry.outputs.registry_name }}.azurecr.io"
          echo "Username: ${{ steps.registry-creds.outputs.registry_username }}"
          echo "Password available: ${{ steps.registry-creds.outputs.registry_password != '' }}"

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.registry.outputs.registry_name }}.azurecr.io
          username: ${{ steps.registry-creds.outputs.registry_username }}
          password: ${{ steps.registry-creds.outputs.registry_password }}

      - name: Verify Docker login
        run: |
          echo "Docker login successful"
          echo "Registry: ${{ steps.registry.outputs.registry_name }}.azurecr.io"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.registry.outputs.registry_name }}.azurecr.io/ai-stock-trade-app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Debug metadata outputs
        run: |
          echo "=== METADATA STEP DEBUG ==="
          echo "Meta step ID: meta"
          echo "Meta outputs (JSON): ${{ toJson(steps.meta.outputs) }}"
          echo "Meta tags raw:"
          echo '${{ steps.meta.outputs.tags }}'
          echo "Meta version: '${{ steps.meta.outputs.version }}'"
          echo "=== END METADATA DEBUG ==="

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-stock-trade-app
          file: ./ai-stock-trade-app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Extract and set container image for deployment
        id: final-output
        run: |
          set -e  # Exit on any error
          echo "=== COMBINED EXTRACT AND OUTPUT STEP ==="
          
          # Get tags from metadata step using heredoc to preserve newlines
          echo "Attempting to read metadata tags..."
          TAGS=$(cat << 'EOFTAGS'
          ${{ steps.meta.outputs.tags }}
          EOFTAGS
          )
          
          echo "Raw TAGS captured:"
          echo "---START TAGS---"
          echo "${TAGS}"
          echo "---END TAGS---"
          echo "Number of tags: $(echo "${TAGS}" | wc -l)"
          
          # Check if TAGS is empty or contains only whitespace
          if [ -z "$(echo "${TAGS}" | tr -d ' \t\n\r')" ]; then
            echo "ERROR: No tags received from metadata step or only whitespace!"
            echo "Meta step outputs: ${{ toJson(steps.meta.outputs) }}"
            exit 1
          fi
          
          # Find SHA tag (preferred for deployment) - handle multiline properly
          echo "Searching for SHA tag..."
          SHA_TAG=$(echo "${TAGS}" | grep -E "sha-[a-f0-9]+" | head -1 | tr -d '\n\r' | xargs)
          echo "SHA_TAG search result: '${SHA_TAG}'"
          echo "SHA_TAG length: ${#SHA_TAG}"
          
          if [ -n "${SHA_TAG}" ]; then
            echo "Found SHA tag: ${SHA_TAG}"
            DEPLOY_IMAGE="${SHA_TAG}"
          else
            echo "No SHA tag found, using first tag..."
            # Fallback to first tag - strip whitespace and newlines
            DEPLOY_IMAGE=$(echo "${TAGS}" | head -1 | tr -d '\n\r' | xargs)
            echo "Using first tag: ${DEPLOY_IMAGE}"
          fi
          
          echo "=== SETTING OUTPUTS AND ARTIFACTS ==="
          echo "Final deployment image: '${DEPLOY_IMAGE}'"
          echo "DEPLOY_IMAGE length: ${#DEPLOY_IMAGE}"
          
          # Check if DEPLOY_IMAGE is empty
          if [ -z "${DEPLOY_IMAGE}" ]; then
            echo "ERROR: DEPLOY_IMAGE is empty after processing!"
            echo "This means the tag processing failed"
            exit 1
          fi
          
          # Write to artifact file for reliable transfer
          echo "=== CREATING ARTIFACT ==="
          mkdir -p build-outputs
          echo "${DEPLOY_IMAGE}" > build-outputs/container-image.txt
          echo "hello-from-combined-step" > build-outputs/test-output.txt
          
          echo "Artifact files created:"
          ls -la build-outputs/
          echo "Container image file contents:"
          cat build-outputs/container-image.txt
          echo "Test output file contents:"
          cat build-outputs/test-output.txt
          
          # Also try traditional GitHub outputs as backup
          echo "=== BACKUP GITHUB OUTPUT ==="
          echo "image=${DEPLOY_IMAGE}" >> "$GITHUB_OUTPUT"
          echo "test_output=hello-from-combined-step" >> "$GITHUB_OUTPUT"
          
          echo "GITHUB_OUTPUT contents:"
          cat "$GITHUB_OUTPUT"
          
          echo "=== END COMBINED STEP ==="
          
      - name: Upload build outputs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-outputs
          path: build-outputs/
          retention-days: 1
          
      - name: Test final output
        run: |
          echo "=== FINAL OUTPUT TEST ==="
          echo "Can we read the final output immediately?"
          echo "Final step - Image: ${{ steps.final-output.outputs.image }}"
          echo "Final step - Test: ${{ steps.final-output.outputs.test_output }}"
          
      - name: Final verification
        run: |
          echo "=== FINAL VERIFICATION ==="
          echo "Final step outputs:"
          echo "  Image: ${{ steps.final-output.outputs.image }}"
          echo "  Test: ${{ steps.final-output.outputs.test_output }}"
          echo "=== JOB OUTPUTS WILL BE ==="
          echo "image: ${{ steps.final-output.outputs.image }}"
          echo "test_output: ${{ steps.final-output.outputs.test_output }}"

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Development
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: ${{ github.event_name == 'workflow_dispatch' && format('development-{0}', github.event.inputs.instanceNumber) || 'development-001' }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build outputs
        uses: actions/download-artifact@v4
        with:
          name: build-outputs
          path: build-outputs/

      - name: Load container image from artifact
        id: load-image
        run: |
          echo "=== LOADING CONTAINER IMAGE FROM ARTIFACT ==="
          if [ -f "build-outputs/container-image.txt" ]; then
            CONTAINER_IMAGE=$(cat build-outputs/container-image.txt)
            echo "Container image from artifact: '${CONTAINER_IMAGE}'"
            echo "container_image=${CONTAINER_IMAGE}" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: container-image.txt not found in artifacts!"
            ls -la build-outputs/
            exit 1
          fi

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Bicep template
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ github.event_name == 'workflow_dispatch' && format('rg-aistock-dev-{0}', github.event.inputs.instanceNumber) || 'rg-aistock-dev-001' }}
          template: ./ai-stock-trade-app/infrastructure/main.bicep
          parameters: ./ai-stock-trade-app/infrastructure/parameters.dev.json instanceNumber=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.instanceNumber || '001' }} containerImage=${{ steps.load-image.outputs.container_image }} alphaVantageApiKey=${{ secrets.ALPHA_VANTAGE_API_KEY }} twelveDataApiKey=${{ secrets.TWELVE_DATA_API_KEY }}
          failOnStdErr: false

      - name: Update Web App Container
        run: |
          INSTANCE_NUM="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.instanceNumber || '001' }}"
          WEBAPP_NAME="app-aistock-dev-${INSTANCE_NUM}"
          RG_NAME="rg-aistock-dev-${INSTANCE_NUM}"
          
          # Get registry information from the same resource group
          REGISTRY_NAME=$(az acr list --resource-group "${RG_NAME}" --query '[0].name' --output tsv)
          REGISTRY_USERNAME=$(az acr credential show --name "${REGISTRY_NAME}" --query 'username' --output tsv)
          REGISTRY_PASSWORD=$(az acr credential show --name "${REGISTRY_NAME}" --query 'passwords[0].value' --output tsv)
          
          echo "Container Image: ${{ steps.load-image.outputs.container_image }}"
          echo "Web App Name: ${WEBAPP_NAME}"
          echo "Resource Group: ${RG_NAME}"
          echo "Registry Name: ${REGISTRY_NAME}"
          
          if [ -z "${{ steps.load-image.outputs.container_image }}" ]; then
            echo "ERROR: Container image is empty!"
            exit 1
          fi
          
          az webapp config container set \
            --name "${WEBAPP_NAME}" \
            --resource-group "${RG_NAME}" \
            --container-image-name "${{ steps.load-image.outputs.container_image }}" \
            --container-registry-url "https://${REGISTRY_NAME}.azurecr.io" \
            --container-registry-user "${REGISTRY_USERNAME}" \
            --container-registry-password "${REGISTRY_PASSWORD}"

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: ${{ github.event_name == 'workflow_dispatch' && format('production-{0}', github.event.inputs.instanceNumber) || 'production-001' }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build outputs
        uses: actions/download-artifact@v4
        with:
          name: build-outputs
          path: build-outputs/

      - name: Load container image from artifact
        id: load-image
        run: |
          echo "=== LOADING CONTAINER IMAGE FROM ARTIFACT ==="
          if [ -f "build-outputs/container-image.txt" ]; then
            CONTAINER_IMAGE=$(cat build-outputs/container-image.txt)
            echo "Container image from artifact: '${CONTAINER_IMAGE}'"
            echo "container_image=${CONTAINER_IMAGE}" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: container-image.txt not found in artifacts!"
            ls -la build-outputs/
            exit 1
          fi

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Debug Variables
        run: |
          echo "=== DEPLOYMENT DEBUG INFO ==="
          echo "Job name: deploy-prod"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Environment input: ${{ github.event.inputs.environment }}"
          echo "Instance Number: ${{ github.event.inputs.instanceNumber }}"
          INSTANCE_NUM="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.instanceNumber || '001' }}"
          echo "Resolved Instance Number: ${INSTANCE_NUM}"
          echo "Resource Group: rg-aistock-prod-${INSTANCE_NUM}"
          echo "Web App Name: app-aistock-prod-${INSTANCE_NUM}"
          echo "=== BUILD JOB OUTPUTS ==="
          echo "Build job result: ${{ needs.build.result }}"
          echo "Build job outputs: ${{ toJson(needs.build.outputs) }}"
          echo "Container image from needs: ${{ needs.build.outputs.image }}"
          echo "Test output: ${{ needs.build.outputs.test_output }}"
          echo "=== ARTIFACT DATA ==="
          echo "Container image from artifact: ${{ steps.load-image.outputs.container_image }}"
          echo "=== VARIABLES ==="
          echo "Subscription ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}"
          echo "Container Image: ${{ steps.load-image.outputs.container_image }}"

      - name: Deploy Bicep template
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ github.event_name == 'workflow_dispatch' && format('rg-aistock-prod-{0}', github.event.inputs.instanceNumber) || 'rg-aistock-prod-001' }}
          template: ./ai-stock-trade-app/infrastructure/main.bicep
          parameters: ./ai-stock-trade-app/infrastructure/parameters.prod.json instanceNumber=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.instanceNumber || '001' }} containerImage=${{ steps.load-image.outputs.container_image }} alphaVantageApiKey=${{ secrets.ALPHA_VANTAGE_API_KEY }} twelveDataApiKey=${{ secrets.TWELVE_DATA_API_KEY }}
          failOnStdErr: false

      - name: Update Web App Container
        run: |
          INSTANCE_NUM="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.instanceNumber || '001' }}"
          WEBAPP_NAME="app-aistock-prod-${INSTANCE_NUM}"
          RG_NAME="rg-aistock-prod-${INSTANCE_NUM}"
          
          # Get registry information from the same resource group
          REGISTRY_NAME=$(az acr list --resource-group "${RG_NAME}" --query '[0].name' --output tsv)
          REGISTRY_USERNAME=$(az acr credential show --name "${REGISTRY_NAME}" --query 'username' --output tsv)
          REGISTRY_PASSWORD=$(az acr credential show --name "${REGISTRY_NAME}" --query 'passwords[0].value' --output tsv)
          
          echo "Container Image: ${{ steps.load-image.outputs.container_image }}"
          echo "Web App Name: ${WEBAPP_NAME}"
          echo "Resource Group: ${RG_NAME}"
          echo "Registry Name: ${REGISTRY_NAME}"
          
          if [ -z "${{ steps.load-image.outputs.container_image }}" ]; then
            echo "ERROR: Container image is empty!"
            exit 1
          fi
          
          az webapp config container set \
            --name "${WEBAPP_NAME}" \
            --resource-group "${RG_NAME}" \
            --container-image-name "${{ steps.load-image.outputs.container_image }}" \
            --container-registry-url "https://${REGISTRY_NAME}.azurecr.io" \
            --container-registry-user "${REGISTRY_USERNAME}" \
            --container-registry-password "${REGISTRY_PASSWORD}"

      - name: Run Health Check
        run: |
          INSTANCE_NUM="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.instanceNumber || '001' }}"
          WEBAPP_NAME="app-aistock-prod-${INSTANCE_NUM}"
          HEALTH_URL="https://${WEBAPP_NAME}.azurewebsites.net/health"
          echo "Waiting for deployment to be ready..."
          echo "Health check URL: ${HEALTH_URL}"
          sleep 30
          curl -f "${HEALTH_URL}" || exit 1
          echo "Health check passed!"

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    name: Security Scan
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build outputs
        uses: actions/download-artifact@v4
        with:
          name: build-outputs
          path: build-outputs/

      - name: Load container image from artifact
        id: load-image
        run: |
          if [ -f "build-outputs/container-image.txt" ]; then
            CONTAINER_IMAGE=$(cat build-outputs/container-image.txt)
            echo "Container image from artifact: '${CONTAINER_IMAGE}'"
            echo "container_image=${CONTAINER_IMAGE}" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: container-image.txt not found in artifacts!"
            exit 1
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.load-image.outputs.container_image }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
