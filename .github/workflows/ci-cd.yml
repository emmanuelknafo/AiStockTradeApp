name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod

env:
  AZURE_WEBAPP_PACKAGE_PATH: "."
  DOTNET_VERSION: "9.0.x"

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal

  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Push Container
    environment: ${{ (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')) && 'production' || 'development' }}
    outputs:
      container-image: ${{ steps.image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/ai-stock-trade-app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set image output
        id: image
        run: |
          echo "Available tags:"
          echo "${{ steps.meta.outputs.tags }}"
          # Use the first tag from the metadata output
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
          echo "Using tag: ${FIRST_TAG}"
          echo "image=${FIRST_TAG}" >> $GITHUB_OUTPUT

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Development
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Bicep template
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: rg-ai-stock-tracker-dev
          template: ./infrastructure/main.bicep
          parameters: ./infrastructure/parameters.dev.json containerImage=${{ needs.build.outputs.container-image }} alphaVantageApiKey=${{ secrets.ALPHA_VANTAGE_API_KEY }} twelveDataApiKey=${{ secrets.TWELVE_DATA_API_KEY }}
          failOnStdErr: false

      - name: Update Web App Container
        run: |
          echo "Container Image: ${{ needs.build.outputs.container-image }}"
          if [ -z "${{ needs.build.outputs.container-image }}" ]; then
            echo "ERROR: Container image is empty!"
            exit 1
          fi
          az webapp config container set \
            --name ai-stock-tracker-dev-webapp \
            --resource-group rg-ai-stock-tracker-dev \
            --container-image-name "${{ needs.build.outputs.container-image }}" \
            --container-registry-url "https://${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io" \
            --container-registry-user "${{ secrets.REGISTRY_USERNAME }}" \
            --container-registry-password "${{ secrets.REGISTRY_PASSWORD }}"

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Debug Variables
        run: |
          echo "Resource Group: ${{ vars.AZURE_RESOURCE_GROUP_PROD }}"
          echo "Subscription ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}"
          echo "Container Image: ${{ needs.build.outputs.container-image }}"

      - name: Deploy Bicep template
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: rg-ai-stock-tracker-prod
          template: ./infrastructure/main.bicep
          parameters: ./infrastructure/parameters.prod.json containerImage=${{ needs.build.outputs.container-image }} alphaVantageApiKey=${{ secrets.ALPHA_VANTAGE_API_KEY }} twelveDataApiKey=${{ secrets.TWELVE_DATA_API_KEY }}
          failOnStdErr: false

      - name: Update Web App Container
        run: |
          echo "Container Image: ${{ needs.build.outputs.container-image }}"
          if [ -z "${{ needs.build.outputs.container-image }}" ]; then
            echo "ERROR: Container image is empty!"
            exit 1
          fi
          az webapp config container set \
            --name ai-stock-tracker-prod-webapp \
            --resource-group rg-ai-stock-tracker-prod \
            --container-image-name "${{ needs.build.outputs.container-image }}" \
            --container-registry-url "https://${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io" \
            --container-registry-user "${{ secrets.REGISTRY_USERNAME }}" \
            --container-registry-password "${{ secrets.REGISTRY_PASSWORD }}"

      - name: Run Health Check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          curl -f https://ai-stock-tracker-prod-webapp.azurewebsites.net/health || exit 1
          echo "Health check passed!"

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    name: Security Scan
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.container-image }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
