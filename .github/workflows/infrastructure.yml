name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy infrastructure'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      location:
        description: 'Azure region for deployment'
        required: true
        default: 'Canada Central'
        type: string
      instanceNumber:
        description: 'Instance number for resource differentiation'
        required: true
        default: '002'
        type: string
      destroy:
        description: 'Destroy infrastructure instead of deploy'
        required: false
        default: false
        type: boolean

env:
  AZURE_RESOURCE_GROUP_DEV: 'rg-aistock-dev-${{ github.event.inputs.instanceNumber }}'
  AZURE_RESOURCE_GROUP_PROD: 'rg-aistock-prod-${{ github.event.inputs.instanceNumber }}'

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    name: Deploy Development Infrastructure
    if: github.event.inputs.environment == 'dev' || github.event.inputs.environment == 'prod'
    environment: ${{ format('development-{0}', github.event.inputs.instanceNumber) }}
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    - name: Create Dev Resource Group
      if: github.event.inputs.destroy != 'true'
      run: |
        RG_NAME="${{ env.AZURE_RESOURCE_GROUP_DEV }}"
        echo "Creating dev resource group: $RG_NAME"
        az group create --name "$RG_NAME" --location "${{ github.event.inputs.location }}"

    - name: Validate Dev Bicep Template
      if: github.event.inputs.destroy != 'true'
      run: |
        az deployment group validate \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }} \
          --template-file ./ai-stock-trade-app/infrastructure/main.bicep \
          --parameters ./ai-stock-trade-app/infrastructure/parameters.dev.json \
          --parameters location="${{ github.event.inputs.location }}" \
          --parameters instanceNumber="${{ github.event.inputs.instanceNumber }}" \
          --parameters containerImage="ai-stock-trade-app:latest" \
          --parameters alphaVantageApiKey="${{ secrets.ALPHA_VANTAGE_API_KEY }}" \
          --parameters twelveDataApiKey="${{ secrets.TWELVE_DATA_API_KEY }}" \
          --parameters sqlAdminPassword="${{ secrets.SQL_ADMIN_PASSWORD }}"

    - name: Deploy Dev Infrastructure
      if: github.event.inputs.destroy != 'true'
      run: |
        echo "Deploying dev infrastructure with container registry..."
        az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }} \
          --template-file ./ai-stock-trade-app/infrastructure/main.bicep \
          --parameters ./ai-stock-trade-app/infrastructure/parameters.dev.json \
          --parameters location="${{ github.event.inputs.location }}" \
          --parameters instanceNumber="${{ github.event.inputs.instanceNumber }}" \
          --parameters containerImage="ai-stock-trade-app:latest" \
          --parameters alphaVantageApiKey="${{ secrets.ALPHA_VANTAGE_API_KEY }}" \
          --parameters twelveDataApiKey="${{ secrets.TWELVE_DATA_API_KEY }}" \
          --parameters sqlAdminPassword="${{ secrets.SQL_ADMIN_PASSWORD }}"

    - name: Verify Dev Infrastructure SQL Setup
      if: github.event.inputs.destroy != 'true'
      run: |
        INSTANCE_NUM="${{ github.event.inputs.instanceNumber }}"
        SQL_SERVER_NAME="sql-aistock-dev-${INSTANCE_NUM}"
        DATABASE_NAME="sqldb-aistock-dev-${INSTANCE_NUM}"
        
        echo "üîç Verifying SQL Server setup for dev environment..."
        echo "SQL Server: ${SQL_SERVER_NAME}.database.windows.net"
        echo "Database: ${DATABASE_NAME}"
        
        # Test basic connectivity to SQL Server
        echo "Testing SQL Server connectivity..."
        if az sql server show --name "${SQL_SERVER_NAME}" --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }} >/dev/null 2>&1; then
          echo "‚úÖ SQL Server is accessible"
          
          # Check if database exists
          if az sql db show --name "${DATABASE_NAME}" --server "${SQL_SERVER_NAME}" --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }} >/dev/null 2>&1; then
            echo "‚úÖ Database is accessible"
            echo "üéØ Infrastructure deployment successful - ready for application deployment"
          else
            echo "‚ö†Ô∏è Database not found - may need to be created during first app deployment"
          fi
        else
          echo "‚ùå SQL Server not accessible - check deployment"
          exit 1
        fi

    - name: Destroy Dev Infrastructure
      if: github.event.inputs.destroy == 'true'
      run: |
        RG_NAME="${{ env.AZURE_RESOURCE_GROUP_DEV }}"
        INSTANCE_NUM="${{ github.event.inputs.instanceNumber }}"
        KV_NAME="kv-aistock-dev-${INSTANCE_NUM}"
        
        echo "=== Destroying dev infrastructure ==="
        echo "Resource Group: $RG_NAME"
        echo "Key Vault: $KV_NAME"
        
        # First, check if Key Vault exists
        echo "Checking for Key Vault: $KV_NAME"
        KV_EXISTS=false
        if az keyvault show --name "$KV_NAME" --resource-group "$RG_NAME" >/dev/null 2>&1; then
          echo "‚úÖ Key Vault found. Will be handled after resource group deletion."
          KV_EXISTS=true
        else
          echo "‚ÑπÔ∏è Key Vault not found or already deleted."
        fi
        
        # Delete the resource group (this will soft-delete the Key Vault)
        echo "üóëÔ∏è Deleting resource group: $RG_NAME"
        az group delete --name "$RG_NAME" --yes --no-wait
        
        # Only attempt Key Vault purge if it existed
        if [ "$KV_EXISTS" = true ]; then
          echo "‚è≥ Waiting 60 seconds for deletion to propagate..."
          sleep 60
          
          echo "üßπ Attempting to purge Key Vault from soft-delete state..."
          # Try multiple times with increasing delays
          for attempt in 1 2 3; do
            echo "Purge attempt $attempt/3..."
            if az keyvault purge --name "$KV_NAME" --location "${{ github.event.inputs.location }}" >/dev/null 2>&1; then
              echo "‚úÖ Key Vault $KV_NAME purged successfully on attempt $attempt"
              break
            else
              if [ $attempt -lt 3 ]; then
                echo "‚è≥ Attempt $attempt failed. Waiting 30 seconds before retry..."
                sleep 30
              else
                echo "‚ö†Ô∏è Could not purge Key Vault after 3 attempts."
                echo "This may happen if the Key Vault is still being processed."
                echo "You can manually purge it later with:"
                echo "az keyvault purge --name $KV_NAME --location '${{ github.event.inputs.location }}'"
              fi
            fi
          done
        fi
        
        echo "‚úÖ Dev infrastructure destruction process completed"

  deploy-prod:
    runs-on: ubuntu-latest
    name: Deploy Production Infrastructure
    needs: deploy-dev
    if: github.event.inputs.environment == 'prod' && always() && (needs.deploy-dev.result == 'success')
    environment: ${{ format('production-{0}', github.event.inputs.instanceNumber) }}
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    - name: Create Prod Resource Group
      if: github.event.inputs.destroy != 'true'
      run: |
        RG_NAME="${{ env.AZURE_RESOURCE_GROUP_PROD }}"
        echo "Creating prod resource group: $RG_NAME"
        az group create --name "$RG_NAME" --location "${{ github.event.inputs.location }}"

    - name: Validate Prod Bicep Template
      if: github.event.inputs.destroy != 'true'
      run: |
        az deployment group validate \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP_PROD }} \
          --template-file ./ai-stock-trade-app/infrastructure/main.bicep \
          --parameters ./ai-stock-trade-app/infrastructure/parameters.prod.json \
          --parameters location="${{ github.event.inputs.location }}" \
          --parameters instanceNumber="${{ github.event.inputs.instanceNumber }}" \
          --parameters containerImage="ai-stock-trade-app:latest" \
          --parameters alphaVantageApiKey="${{ secrets.ALPHA_VANTAGE_API_KEY }}" \
          --parameters twelveDataApiKey="${{ secrets.TWELVE_DATA_API_KEY }}" \
          --parameters deployContainerRegistry=false \
          --parameters sqlAdminPassword="${{ secrets.SQL_ADMIN_PASSWORD }}"

    - name: Deploy Prod Infrastructure
      if: github.event.inputs.destroy != 'true'
      run: |
        echo "Deploying prod infrastructure WITHOUT container registry..."
        az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP_PROD }} \
          --template-file ./ai-stock-trade-app/infrastructure/main.bicep \
          --parameters ./ai-stock-trade-app/infrastructure/parameters.prod.json \
          --parameters location="${{ github.event.inputs.location }}" \
          --parameters instanceNumber="${{ github.event.inputs.instanceNumber }}" \
          --parameters containerImage="ai-stock-trade-app:latest" \
          --parameters alphaVantageApiKey="${{ secrets.ALPHA_VANTAGE_API_KEY }}" \
          --parameters twelveDataApiKey="${{ secrets.TWELVE_DATA_API_KEY }}" \
          --parameters deployContainerRegistry=false \
          --parameters sqlAdminPassword="${{ secrets.SQL_ADMIN_PASSWORD }}"

    - name: Verify Prod Infrastructure SQL Setup
      if: github.event.inputs.destroy != 'true'
      run: |
        INSTANCE_NUM="${{ github.event.inputs.instanceNumber }}"
        SQL_SERVER_NAME="sql-aistock-prod-${INSTANCE_NUM}"
        DATABASE_NAME="sqldb-aistock-prod-${INSTANCE_NUM}"
        
        echo "üîç Verifying SQL Server setup for production environment..."
        echo "SQL Server: ${SQL_SERVER_NAME}.database.windows.net"
        echo "Database: ${DATABASE_NAME}"
        
        # Test basic connectivity to SQL Server
        echo "Testing SQL Server connectivity..."
        if az sql server show --name "${SQL_SERVER_NAME}" --resource-group ${{ env.AZURE_RESOURCE_GROUP_PROD }} >/dev/null 2>&1; then
          echo "‚úÖ SQL Server is accessible"
          
          # Check if database exists
          if az sql db show --name "${DATABASE_NAME}" --server "${SQL_SERVER_NAME}" --resource-group ${{ env.AZURE_RESOURCE_GROUP_PROD }} >/dev/null 2>&1; then
            echo "‚úÖ Database is accessible"
            
            # For production, also verify Azure AD configuration
            echo "üîê Checking Azure AD configuration..."
            AD_ADMIN=$(az sql server ad-admin list --server "${SQL_SERVER_NAME}" --resource-group ${{ env.AZURE_RESOURCE_GROUP_PROD }} --query '[0].login' --output tsv 2>/dev/null || echo "")
            if [ -n "$AD_ADMIN" ] && [ "$AD_ADMIN" != "null" ]; then
              echo "‚úÖ Azure AD admin configured: $AD_ADMIN"
              echo "üéØ Production infrastructure deployment successful - ready for application deployment"
              echo ""
              echo "üìã Next steps for application deployment:"
              echo "   1. CI/CD pipeline will automatically create managed identity SQL user"
              echo "   2. Application will use Azure AD authentication to connect"
              echo "   3. Health checks should pass automatically"
            else
              echo "‚ö†Ô∏è Azure AD admin not configured - using SQL authentication"
              echo "üéØ Infrastructure deployment successful - ready for application deployment"
            fi
          else
            echo "‚ö†Ô∏è Database not found - may need to be created during first app deployment"
          fi
        else
          echo "‚ùå SQL Server not accessible - check deployment"
          exit 1
        fi

    - name: Destroy Prod Infrastructure
      if: github.event.inputs.destroy == 'true'
      run: |
        RG_NAME="${{ env.AZURE_RESOURCE_GROUP_PROD }}"
        INSTANCE_NUM="${{ github.event.inputs.instanceNumber }}"
        KV_NAME="kv-aistock-prod-${INSTANCE_NUM}"
        
        echo "=== Destroying prod infrastructure ==="
        echo "Resource Group: $RG_NAME"
        echo "Key Vault: $KV_NAME"
        
        # First, check if Key Vault exists
        echo "Checking for Key Vault: $KV_NAME"
        KV_EXISTS=false
        if az keyvault show --name "$KV_NAME" --resource-group "$RG_NAME" >/dev/null 2>&1; then
          echo "‚úÖ Key Vault found. Will be handled after resource group deletion."
          KV_EXISTS=true
        else
          echo "‚ÑπÔ∏è Key Vault not found or already deleted."
        fi
        
        # Delete the resource group (this will soft-delete the Key Vault)
        echo "üóëÔ∏è Deleting resource group: $RG_NAME"
        az group delete --name "$RG_NAME" --yes --no-wait
        
        # Only attempt Key Vault purge if it existed
        if [ "$KV_EXISTS" = true ]; then
          echo "‚è≥ Waiting 60 seconds for deletion to propagate..."
          sleep 60
          
          echo "üßπ Attempting to purge Key Vault from soft-delete state..."
          # Try multiple times with increasing delays
          for attempt in 1 2 3; do
            echo "Purge attempt $attempt/3..."
            if az keyvault purge --name "$KV_NAME" --location "${{ github.event.inputs.location }}" >/dev/null 2>&1; then
              echo "‚úÖ Key Vault $KV_NAME purged successfully on attempt $attempt"
              break
            else
              if [ $attempt -lt 3 ]; then
                echo "‚è≥ Attempt $attempt failed. Waiting 30 seconds before retry..."
                sleep 30
              else
                echo "‚ö†Ô∏è Could not purge Key Vault after 3 attempts."
                echo "This may happen if the Key Vault is still being processed."
                echo "You can manually purge it later with:"
                echo "az keyvault purge --name $KV_NAME --location '${{ github.event.inputs.location }}'"
              fi
            fi
          done
        fi
        
        echo "‚úÖ Prod infrastructure destruction process completed"

  deployment-summary:
    runs-on: ubuntu-latest
    name: Deployment Summary
    needs: [deploy-dev, deploy-prod]
    if: always() && github.event.inputs.destroy != 'true'
    
    steps:
    - name: Generate Summary
      run: |
        echo "## Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment Requested**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Instance Number**: ${{ github.event.inputs.instanceNumber }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Location**: ${{ github.event.inputs.location }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-dev.result }}" == "success" ]; then
          echo "‚úÖ **Dev Infrastructure**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Dev Resource Group**: ${{ env.AZURE_RESOURCE_GROUP_DEV }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dev Web App**: https://app-aistock-dev-${{ github.event.inputs.instanceNumber }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Registry**: Deployed in dev environment (shared with prod)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Dev Infrastructure**: ${{ needs.deploy-dev.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
          if [ "${{ needs.deploy-prod.result }}" == "success" ]; then
            echo "‚úÖ **Prod Infrastructure**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- **Prod Resource Group**: ${{ env.AZURE_RESOURCE_GROUP_PROD }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Prod Web App**: https://app-aistock-prod-${{ github.event.inputs.instanceNumber }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
            echo "- **Container Registry**: Uses shared registry from dev environment" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Prod Infrastructure**: ${{ needs.deploy-prod.result }}" >> $GITHUB_STEP_SUMMARY
          fi
        fi
