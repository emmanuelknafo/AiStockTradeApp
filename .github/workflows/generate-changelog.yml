name: Generate Changelog

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-changelog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Changelog Weaver
        run: |
          git clone --depth 1 https://github.com/Hankanman/Changelog-Weaver.git changelog-weaver

      - name: Install Changelog Weaver dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r changelog-weaver/requirements.txt

      - name: Create .env file for Changelog Weaver
        run: |
          set -e
          TO_TAG="${{ github.ref_name }}"
          # Ensure tags are available for prev-tag detection
          git fetch --tags --quiet
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "^${TO_TAG}$" | head -n1 || echo "v0.0.0")

          # Write a complete .env into the cloned script repo
          echo "SOLUTION_NAME=${{ github.repository }}" > changelog-weaver/.env
          echo "RELEASE_VERSION=${TO_TAG}" >> changelog-weaver/.env
          echo "SOFTWARE_SUMMARY=Release ${TO_TAG}" >> changelog-weaver/.env
          echo "GET_ITEM_SUMMARY=True" >> changelog-weaver/.env
          echo "GET_CHANGELOG_SUMMARY=True" >> changelog-weaver/.env
          echo "INCLUDE_COMMITS=False" >> changelog-weaver/.env
          echo "PROJECT_URL=https://github.com/${{ github.repository }}" >> changelog-weaver/.env
          echo "QUERY=is:closed" >> changelog-weaver/.env
          echo "ACCESS_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> changelog-weaver/.env
          echo "REPO_NAME=${{ github.repository }}" >> changelog-weaver/.env
          echo "BRANCH=main" >> changelog-weaver/.env
          echo "FROM_TAG=${PREV_TAG}" >> changelog-weaver/.env
          echo "TO_TAG=${TO_TAG}" >> changelog-weaver/.env

          # Azure OpenAI configuration (must be added as repository secrets)
          echo "GPT_API_KEY=${{ secrets.AZURE_OPENAI_KEY }}" >> changelog-weaver/.env
          echo "MODEL_BASE_URL=${{ secrets.AZURE_OPENAI_ENDPOINT }}" >> changelog-weaver/.env
          echo "MODEL=${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}" >> changelog-weaver/.env

          echo "OUTPUT_FOLDER=Releases" >> changelog-weaver/.env
          echo "LOG_LEVEL=INFO" >> changelog-weaver/.env

          # Also set OpenAI client environment so the underlying library uses Azure
          echo "OPENAI_API_BASE=${{ secrets.AZURE_OPENAI_ENDPOINT }}" >> changelog-weaver/.env
          echo "OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_KEY }}" >> changelog-weaver/.env
          echo "OPENAI_API_TYPE=azure" >> changelog-weaver/.env
          echo "OPENAI_API_VERSION=2023-10-01-preview" >> changelog-weaver/.env

      - name: "Debug: show generated .env and directory"
        run: |
          echo "PWD: $(pwd)"
          echo "Listing changelog-weaver directory:"; ls -la changelog-weaver || true
          echo "--- .env (masked) ---"
          if [ -f changelog-weaver/.env ]; then
            sed -n '1,200p' changelog-weaver/.env | sed -E "s/(OPENAI_API_KEY|GPT_API_KEY|ACCESS_TOKEN|AZURE_OPENAI_KEY|AZURE_OPENAI_ENDPOINT|AZURE_OPENAI_DEPLOYMENT_NAME)=.*/\1=***MASKED***/g"
          else
            echo "changelog-weaver/.env not found"
          fi

      - name: Prepare Azure OpenAI wrapper
        run: |
          cat > changelog-weaver/run_changelog.py <<'PY'
          import os
          from dotenv import load_dotenv
          # Load the .env that was written by the workflow (changelog-weaver/.env)
          load_dotenv('.env')

          import openai
          import sys

          # Diagnostic output (masked key preview)
          print("=== Azure/OpenAI env diagnostics ===")
          print("MODEL_BASE_URL:", os.getenv('MODEL_BASE_URL'))
          print("OPENAI_API_BASE:", os.getenv('OPENAI_API_BASE'))
          print("OPENAI_API_TYPE:", os.getenv('OPENAI_API_TYPE'))
          print("OPENAI_API_VERSION:", os.getenv('OPENAI_API_VERSION'))
          key = os.getenv('OPENAI_API_KEY', os.getenv('GPT_API_KEY', ''))
          print("OPENAI_API_KEY set:", bool(key))
          if key:
              print("OPENAI_API_KEY preview:", key[:8] + '...')
          sys.stdout.flush()

          # Configure openai module-level variables for Azure (after loading .env)
          openai.api_type = os.getenv('OPENAI_API_TYPE', '')
          openai.api_base = os.getenv('OPENAI_API_BASE', os.getenv('MODEL_BASE_URL', ''))
          openai.api_version = os.getenv('OPENAI_API_VERSION', '')
          openai.api_key = key

          print("Resolved openai.api_base:", getattr(openai, 'api_base', None))
          print("Resolved openai.api_key set:", bool(getattr(openai, 'api_key', None)))
          sys.stdout.flush()

          # Run the changelog main
          from changelog_weaver.changelog import main as main_function
          import asyncio
          asyncio.run(main_function())
          PY

      - name: Ensure Releases owner folder exists
        run: |
          mkdir -p changelog-weaver/Releases/${{ github.repository_owner }}

      - name: Test Azure OpenAI auth
        run: |
          set -e
          echo "Testing Azure OpenAI authentication (response body truncated)..."
          AZ_BASE=${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZ_DEPLOY=${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
          AZ_KEY=${{ secrets.AZURE_OPENAI_KEY }}
          # Curl the Azure Chat Completions endpoint for this deployment (api-version set to the workflow default)
          curl -s -X POST "${AZ_BASE}/openai/deployments/${AZ_DEPLOY}/chat/completions?api-version=2023-10-01-preview" \
            -H "Content-Type: application/json" \
            -H "api-key: ${AZ_KEY}" \
            -d '{"messages": [{"role": "user", "content": "ping"}], "max_tokens": 1}' \
            -o /tmp/aztest.json || true
          echo "HTTP response (first 1000 chars):"
          head -c 1000 /tmp/aztest.json || true

      - name: Patch Changelog-Weaver model to use module-level openai
        run: |
          python - <<'PY'
          from pathlib import Path
          p = Path('changelog-weaver/changelog_weaver/configuration/model.py')
          if p.exists():
              s = p.read_text()
              old = 'self.client = openai.OpenAI(api_key=api_details.key)'
              if old in s:
                  s = s.replace(old, 'openai.api_key = api_details.key\n        self.client = openai')
                  p.write_text(s)
                  echo = 'Patched model.py to use module-level openai'
              else:
                  echo = 'Patch not required'
          else:
              echo = 'model.py not found; skipping patch'
          print(echo)
          PY

      - name: Generate Changelog (Azure-ready)
        run: |
          cd changelog-weaver
          python run_changelog.py

      - name: Upload Changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog-weaver/Releases/*.md

      - name: Attach Changelog to Release
        if: ${{ github.event_name == 'release' }}
        uses: softprops/action-gh-release@v1
        with:
          files: changelog-weaver/Releases/*.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
