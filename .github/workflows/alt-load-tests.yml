name: Alt Load Tests - dev-002

on:
  push:
    branches: ['*']
    paths:
      - 'load-tests/**'
      - '.github/workflows/alt-load-tests.yml'
  pull_request:
    branches: ['*']
    paths:
      - 'load-tests/**'
      - '.github/workflows/alt-load-tests.yml'

env:
  LOAD_TEST_RESOURCE: lt-aistock-dev-002
  LOAD_TEST_RESOURCE_GROUP: rg-aistock-dev-002
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

jobs:
  load_test:
    name: Run Azure Load Test (dev-002)
    runs-on: [self-hosted, linux, x64]
    permissions:
      id-token: write
      contents: write # needed to push git tag

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare load test files
        run: |
          echo "Preparing load test files"
          mkdir -p .github/workflows/load-tests || true
          cp -v load-tests/paths.csv .github/workflows/load-tests/paths.csv || true
          cp -v load-tests/jmeter/test-plan.azure.jmx .github/workflows/test-plan.azure.jmx || true
          cp -v load-tests/jmeter/test-plan.jmx .github/workflows/test-plan.jmx || true
          cp -v load-tests/jmeter/test-plan.generated.jmx .github/workflows/test-plan.generated.jmx || true

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Start Azure Load Test run (dev-002)
        env:
          AZ_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          LOAD_TEST_RESOURCE: ${{ env.LOAD_TEST_RESOURCE }}
          LOAD_TEST_RESOURCE_GROUP: ${{ env.LOAD_TEST_RESOURCE_GROUP }}
        run: |
          set -eo pipefail
          echo "Triggering Azure Load Test run for resource: $LOAD_TEST_RESOURCE in group: $LOAD_TEST_RESOURCE_GROUP"

          echo "Installing PyYAML to parse YAML"
          python -m pip install --quiet pyyaml

          CONFIG_PATH=".azuredevops/pipelines/alt-config.yml"
          if [ ! -f "$CONFIG_PATH" ]; then
            echo "Configuration file $CONFIG_PATH not found" >&2
            exit 1
          fi

          # Build a minimal run-body.json (API expects a specific shape). Use only safe fields.
          python -c 'import yaml,json,re,sys; s=open(".azuredevops/pipelines/alt-config.yml","r",encoding="utf-8").read(); s=re.sub(r"aistock-dev-003","aistock-dev-002",s); s=re.sub(r"dev-003","dev-002",s); cfg=yaml.safe_load(s); props={}; [(props.__setitem__(k,cfg[k])) for k in ("testId","displayName","description","engineInstances") if k in cfg and cfg[k] is not None]; [(props.__setitem__(k,cfg[k])) for k in ("testPlan","testType") if k in cfg and cfg[k] is not None]; import json as _json; _json.dump({"properties":props}, open("run-body.json","w"), indent=2)'

          # Resolve AZ_SUBSCRIPTION_ID: prefer step secret, then top-level AZURE_SUBSCRIPTION_ID, then query az
          if [ -z "${AZ_SUBSCRIPTION_ID}" ]; then
            if [ -n "${AZURE_SUBSCRIPTION_ID}" ]; then
              AZ_SUBSCRIPTION_ID="${AZURE_SUBSCRIPTION_ID}"
              echo "Using AZ_SUBSCRIPTION_ID from env AZURE_SUBSCRIPTION_ID"
            else
              echo "AZ_SUBSCRIPTION_ID not set - querying 'az account show' for the active subscription"
              AZ_SUBSCRIPTION_ID=$(az account show --query id -o tsv || true)
              echo "Detected subscription: ${AZ_SUBSCRIPTION_ID}"
            fi
          fi

          # Use a supported API version (2022-12-01 is supported in most regions)
          API_VERSION="2022-12-01"
          URI="https://management.azure.com/subscriptions/${AZ_SUBSCRIPTION_ID}/resourceGroups/${LOAD_TEST_RESOURCE_GROUP}/providers/Microsoft.LoadTestService/loadTests/${LOAD_TEST_RESOURCE}/run?api-version=${API_VERSION}"

          # Ensure the Microsoft.LoadTestService provider is registered in this subscription
          echo "Checking Microsoft.LoadTestService provider registration"
          regState=$(az provider show --namespace Microsoft.LoadTestService --query registrationState -o tsv || echo "NotFound")
          echo "Provider registration state: ${regState}"
          if [ "${regState}" != "Registered" ]; then
            echo "Registering Microsoft.LoadTestService provider..."
            az provider register --namespace Microsoft.LoadTestService
            echo "Waiting for provider to register (this may take a few moments)"
            for i in 1 2 3 4 5; do
              sleep 6
              regState=$(az provider show --namespace Microsoft.LoadTestService --query registrationState -o tsv || echo "NotFound")
              echo "Attempt ${i}: provider state=${regState}"
              [ "${regState}" = "Registered" ] && break
            done
          fi

          echo "---- REQUEST (run-body.json) ----"
          cat run-body.json || true

          echo "Calling Azure REST API to start the run and saving response to az_response.json"
          az rest --method post --uri "$URI" --body @run-body.json --output json > az_response.json 2>&1 || true

          echo "---- RESPONSE (az_response.json) ----"
          sed -n '1,400p' az_response.json || true

          # If the response contains an error, surface it and fail the step so CI shows details
          if grep -q 'error' az_response.json; then
            echo "Azure REST returned an error; see az_response.json above for details"
            exit 1
          fi

      - name: Upload run artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: load-test-artifacts-dev-002
          path: |
            .github/workflows/load-tests/**
            .github/workflows/test-plan.*
            run-body.json
